import math
import gl
import constraint

// lets test the cassowary constraint solver

var solver = CS.SimplexSolver.new()
var a = CS.Variable.new({name:'a'})
solver.addConstraint(CS.StayConstraint.new(a, CS.Strength.strong, 0))
solver.resolve()
solver.addEditVar(a, CS.Strength.required)
        .beginEdit()
        .suggestValue(a, 2)
        .resolve()

class Rect extends Draw{
	mesh = vec2Rect(-.5, -.5, 1, 1)
	vertex: mesh[]
	pixel: #lightblue
}

class Scene extends Device{
	m_camera = mat4()
	draw:(){
		m_childworld = mat4.identity()
		drawChildren(this)
	}
}

// a layer with matrices
class Layer extends Draw{

	// define object types
	mesh = vec2[0]()
	m_world = mat4()
	m_mesh = mat4()

	draw:(parent){
		// so the world transform is the parent m_child transform times the local transform
		// and the child transform 
		mat4 m_parent = parent.m_childworld
		
		// generate m_local from xyz whd
		mat4 m_local = mat4.T(x, y, z)

		// generate our world matrix
		m_world = m_parent * m_local

		m_mesh = mat4.identity()

		this{
			vertex: mesh[] * (m_mesh * m_world * device.m_camera)
		}

		// we have a special mesh transform matrix for modifying the local mesh only
		m_mesh = mat4.identity()

		// now lets make these things work
		if(children){
			m_child = mat4.identity()
			m_childworld = m_child * m_world
			drawChildren(this)
		}
	}

	x = 0
	y = 0
	z = 0
	w = 10
	h = 10
	d = 10
}

Scene{
	fill = #000
	Layer{
		pixel:#red
	}
}