import math
import glscene

// chunked text behaves like text
class ChunkedTextImpl{

	dontProxy('default_alloc', 'chunk_lines',
		'text_initialized','chunk_list','line_height',
		'cache_chunk','last_chunk','add_y','char_off')

	// text chunk class
	class Chunk extends Text{
	dump = 1		
		constructor(parent){
			this.parent = parent
			Text::constructor()
			font_size = parent.font_size
			style = parent.style
			paint = parent.paint || paint
			toInt = parent.toInt
			//customDistance = parent.customDistance
			//sampleDistance = parent.sampleDistance
			line_spacing = parent.line_spacing
		}
		u_contrast: parent.u_contrast
		u_boldness: parent.u_boldness
		u_subpixel_distance: parent.u_subpixel_distance

		u_background_color: parent.u_background_color
	}

	default_alloc = 500
	chunk_lines = 10
	
	get line_height(){
		return last_chunk? last_chunk.line_height: 0
	}

	constructor(){
		text_initialized = true
		// create a new last_chunk to start growing
		chunk_list = [last_chunk = this.Chunk.new(this)]
		last_chunk.chunk_id = 0
		last_chunk.allocText(default_alloc)
		last_chunk.accum_off = 0
		char_off = 0
		add_y = 0
		//last_chunk.style = style
	}
	
	offsetFromPos(x, y){
		// scan the chunks by y pos
		if(!cache_chunk) cache_chunk = last_chunk
		// we have to correct for y being at the font baseline.
		while(cache_chunk && y < cache_chunk.baseToTop(cache_chunk.y)){
			cache_chunk = chunk_list[cache_chunk.chunk_id -1]
		}
		while(cache_chunk && y >= cache_chunk.baseToTop(cache_chunk.y) + cache_chunk.add_y){
			cache_chunk = chunk_list[cache_chunk.chunk_id + 1]
		}
		if(!cache_chunk) cache_chunk = last_chunk
		// lets find the closest character
		return cache_chunk.offsetFromPos(x, y - cache_chunk.y) + cache_chunk.accum_off
	}

	cursorRect(off){
		var chunk = findChunk(off)
		var rect = chunk.cursorRect(off - chunk.accum_off)		
		rect.y += chunk.y
		return rect
	}

	charBounds(off){
		var chunk = findChunk(off)
		var b = chunk.charBounds(off - chunk.accum_off)
		// we need to find the actual baseline for this 

		b.y += chunk.y
		return b
	}

	// we expose the Text api onto subchunks
	charTag(off){
		// we have to find the right character tag
		var chunk = findChunk(off)
		return chunk.charTag_z(off - chunk.accum_off)
	}
	
	findChunk(off){
		// otherwise we scan up or down from cache_chunk
		if(!cache_chunk) cache_chunk = last_chunk
		while(cache_chunk && off < cache_chunk.accum_off){
			cache_chunk = chunk_list[cache_chunk.chunk_id -1]
		}
		while(cache_chunk && off >= cache_chunk.accum_off + cache_chunk.char_off){
			cache_chunk = chunk_list[cache_chunk.chunk_id + 1]
		}
		if(!cache_chunk) cache_chunk = last_chunk
		return cache_chunk
	}

	charTag_z(off){
		var chunk = findChunk(off)
		return chunk.charTag_z(off - chunk.accum_off)
	}

	reserialize(){
	}

	charBaseline(off){
		var chunk = findChunk(off)
		return chunk.charBaseline(off - chunk.accum_off) + chunk.y
	}
	
	reallocText(extra){
		//last_chunk.reallocText(extra)
	}

	allocText(length){
		//last_chunk.allocText(length)
	}

	updateText(){
		last_chunk.updateText()
	}

	tagChar(off, length, x, y, z){
		last_chunk.tagChar(off, length, x, y, z)
	}

	newline(t){
		char_off += last_chunk.newline(t)
		if(last_chunk.lines > chunk_lines){
			var new_chunk = this.Chunk.new(this)
			// complete last_chunk
			last_chunk.updateText()
			add_y += last_chunk.add_y
			new_chunk.accum_off = last_chunk.char_off + last_chunk.accum_off
			new_chunk.chunk_id = chunk_list.length
			new_chunk.y = add_y 

			chunk_list.push(last_chunk = new_chunk)
			last_chunk.allocText(default_alloc)
		}
	}

	tab(t){
		char_off += last_chunk.tab(t)
	}

	space(t){
		char_off += last_chunk.space(t)
	}

	string(text, x, y){
		// lets add text to our last last_chunk
		last_chunk.tag_x = tag_x
		last_chunk.tag_y = tag_y
		char_off += last_chunk.string(text, x, y)
	}
}