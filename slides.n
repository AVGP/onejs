import math
import gl
import glscene
import input
import warps

define text_hcenter parent.w*.5 - text_w*.5
define text_vcenter parent.h*.5 - text.h*.5

var key = Key.new()
var mouse = Mouse.new()

class Deck extends Scene{

	selected = 0
	anim_len = .2
	mode = 'shader'
	constructor(){
		buf_prev = Texture.rgba_depth()
		buf_next = Texture.rgba_depth()

		mouse.left=
		key.enter =
		key.right(v)=>{
			if(v && selected < children.length - 1){
				selected++
			}
		}
		mouse.right = 
		key.space=
		key.escape = 
		key.left(v)=>{
			if(v && selected > 0){
				selected --
			}
		}
	}
	
	transition:(float t){
		return mix(buf_prev.sample(zoom(hp, 1.-t)), buf_next.sample(hp), t)
	}

	mesh = vec2Rect(-1,-1,2,2)
	// overload drawChildren
	drawChildren:(parent, sec){
		if(from_slide === undefined) from_slide = selected
		if(from_slide !== selected && !in_anim){
			time_start = sec
			to_slide = selected
			in_anim = true
		}
		if(in_anim){
			var t = (sec - time_start) / anim_len
			if(t > 1)in_anim = false,  t = 1

			t = easeQuad(t)
			var next = children[to_slide]
			var prev = children[from_slide]

			if(mode == 'slide'){
				if(to_slide>from_slide){
					prev.x = -w*t
					next.x = w*(1-t)
				} 
				else{
					prev.x = w*t
					next.x = -w*(1-t)
				}
				prev.draw(this, sec)
				next.draw(this, sec)
			}
			else if(mode == 'shader'){
				buf_prev{
					prev.draw(this, sec)
				}
				buf_next{
					next.draw(this, sec)
				}
				var slideid = to_slide
				this{
					vertex: mesh[]
					hp: ((pixel mesh[])+1.)/2.
					pixel: transition(t, slideid)
				}
			}

			if(!in_anim){
				if(to_slide != selected){
					time_start = sec
					from_slide = to_slide
					to_slide = selected
					in_anim = true
				}
				else from_slide = to_slide
			}
		}
		else{
			var c = children[selected]
			c.x =0 
			c.y= 0
			if(c) c.draw(this, sec)
		}
	}

	class Slide extends Layer{
		x = 0
		y = 0
		w:device.w
		h:device.h

		pixel:#111

		class Title extends Text{
			font_size = 80
			constructor(){
				Text::constructor()
				y: 20
				x: text_hcenter
			}
		}

		class Body extends Layer{
			pixel: #222
			y: 140
			x: 20
			w: parent.w - 2*x
			h: parent.h - y - 20
		}
	}
}
