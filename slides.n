import math
import gl
import glscene
import input
import warps

define text_hcenter parent.w*.5 - text_w*.5
define text_vcenter parent.h*.5 - text.h*.5

var key = Key.new()
var mouse = Mouse.new()
var touch = Touch.new()

class Deck extends Scene{

	selected = 0
	anim_len = .2

	transition_mode = 'single' // 'dual' 'slide'

	constructor(){
		buf_prev = Texture.rgba_depth()
		buf_next = Texture.rgba_depth()

		touch.swiperight=
		key.enter =
		key.right(v)=>{
			if(v && selected < children.length - 1){
				selected++
			}
		}

		touch.swipeleft =
		key.space=
		key.escape = 
		key.left(v)=>{
			if(v && selected > 0){
				selected --
			}
		}

		touch.start(){
			// depending on the direction yr swiping we transition between slides
		}
	}

	// only render the previous slide to a texture
	single_transition:(t, to_page){
		if(mod(to_page,2.) == 0.)
			return vec4(buf_prev.sample(zoom(rotate(hp, 10.*t*t), 1.+5.*t)).rgb, 1.-t)
		return vec4(buf_prev.sample(zoom(hp, 1.-t)).rgb, 1.-t)
	}

	// render both slides to texture for more advanced transitions
	dual_transition:(t, to_page){
		if(mod(to_page,2.) == 0.)
			return mix(buf_prev.sample(zoom(rotate(hp, 10.*t*t), 1.+5.*t)), buf_next.sample(hp), t)
		return mix(buf_prev.sample(zoom(hp, 1.-t)), buf_next.sample(hp), t)
	}

	mesh = vec2Rect(-1,-1,2,2)
	
	// overload drawChildren
	pass:(sec){
		if(in_anim){
			if(transition_mode != 'slide'){
				if(buf_prev_done != prev_pass)
				buf_prev{
					buf_prev_done = prev_pass
					prev_pass.draw(this, sec)
				}
				if(transition_mode != 'single'){
					buf_next{
						next_pass.draw(this, sec)
					}
				}
				pass_drawn = 1
			}
		}
	}

	// custom drawchildren to do slide transitions
	drawChildren:(parent, sec){
		if(from_slide === undefined) from_slide = selected

		if(from_slide !== selected && !in_anim){
			time_start = sec
			to_slide = selected
			in_anim = true
			pass_drawn = false
			prev_pass = children[from_slide]
			next_pass = children[to_slide]
		}

		if(in_anim){
			var t = (sec - time_start) / anim_len
			if(t > 1)in_anim = false,  t = 1

			t = easeQuad(t)

			if(transition_mode == 'slide'){
				if(to_slide>from_slide){
					prev.x = -w*t
					next.x = w*(1-t)
				} 
				else{
					prev.x = w*t
					next.x = -w*(1-t)
				}
				prev_pass.draw(this, sec)
				next_pass.draw(this, sec)
			}
			else if(transition_mode == 'dual'){
				if(pass_drawn){
					var slideid = to_slide
					this{
						vertex: mesh[]
						hp: ((pixel mesh[])+1.)/2.
						pixel: dual_transition(t, slideid)
					}
				}
				else{
					prev_pass.draw(this, sec)
				}
			}
			else if(transition_mode == 'single'){
				if(pass_drawn){
					var slideid = to_slide
					next_pass.draw(this, sec)
					this{
						vertex: mesh[]
						hp: ((pixel mesh[])+1.)/2.
						pixel: single_transition(t, slideid)
					}
				}
				else{
					prev_pass.draw(this, sec)
				}
			}
			if(!in_anim){
				if(to_slide != selected){
					time_start = sec
					from_slide = to_slide
					to_slide = selected
					pass_drawn = false
					in_anim = true
					prev_pass = children[from_slide]
					next_pass = children[to_slide]
				}
				else from_slide = to_slide
			}
		}
		else{
			var c = children[selected]
			c.x =0 
			c.y= 0
			if(c) c.draw(this, sec)
		}
	}
	
	// child classes
	class Slide extends Layer{
		x = 0
		y = 0
		w:device.w
		h:device.h

		pixel:#111

		class Title extends Text{
			font_size = 80
			u_outline = true
			constructor(){
				Text::constructor()
				y: 20
				x: text_hcenter
			}
		}

		class Body extends Layer{
			pixel: #222
			y: 140
			x: 20
			w: parent.w - 2*x
			h: parent.h - y - 20

			// lets center bullets
			class Bullet extends Text{
				x = 40
				font_size = 60
			}
		}
	}
}
