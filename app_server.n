#!/usr/bin/env node --harmony one_node.js
/**
 *  ONEJS Static nodejs server
 * 
 *  Copyright (C) 2014 ONEJS 
 *
 *  MIT license: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
import node
import htmlscraper

var live = true
if(live){
	var addr = "0.0.0.0"
	var port = 80
}
else{
	var addr = "127.0.0.1"
	var port = 2001
}

var fs_root = Path.resolve(__dirname)

class StaticServer extends HttpServer{
	// when you assign to something you must make it explicit
	// when you read from something you can omit it.
	watch( path ){

		files ?= {}
		if(files[path]) return

		files[path] = fs.watchFile(path).then 
		do(){
			log("---- " + path + " changed, sending reload to frontend ----" )
			for(var res of pending){
				res.writeHead(200)
				res.end('Reload')
			}
		}
	}

	// lets package our app
	package( file, root ){
		var html = await fs.readFile(file)
		var tree = HTMLScraper.parse(html)

		// lets inline each script tag
		for(var script from tree.html.head.script){
			if(script.$src){
				if(script.$src == 'reloader.js'){
					delete script.$src
					continue
				}
				var file = await fs.readFile(script.$src)
				delete script.$src
				script.text = file.toString()
			}
		}

		// recursively find all our dependencies
		var onejs = {}
		function fetch(file){
			var code = await fs.readFile(file + '.n')
			onejs[file] = code.toString()
			var ast = parse('->{' + code + '\n}')
			for(var dep from ast.getDependencies()){
				await fetch(dep)
			}
		}
		await fetch(root)

		// add new tags 
		for(var file in onejs) tree.html.head.appendChild() do {
			tagname:'script'
			$type: 'text/onejs'
			$id: file == root ? 'main' : file
			text: onejs[file]
		}
		// ok first lets stringify it again.
		return tree.toString()
	}

	route("/_reloader_") 
	do( req, res ){
		(pending ?= []).push(res)
	}

	route(/.*/) 
	do( req, res ){
		var path = req.url.pathname
		if(!live && path == '/') path = 'index.html'
		var fullpath = Path.join(fs_root, path)

		log(`Reading ${path}`)

		if(path == '/pull'){
			log('Updating and clearing cache!')
			child_process.exec('git pull')
			child_process.exec('rm -rf cache_*')
			res.writeHead(200)
			res.end()
			return
		}
		// lets do some quick n dirty packaging
		if(path == '/'){
			var host = req.headers.host
			var root = ''
			if(host.indexOf('localhost') == 0) root = 'index'
			else root = host.slice(0, host.indexOf('.'))
			var cache_file = 'cache_'+root
			var exist = await fs.exists(cache_file)
			var header = {
				"Content-Type": "text/html"
				"Content-encoding":"deflate"
			}
			if(exist){
				log('Loading cached ' + cache_file)
				var stream = fs.createReadStream(cache_file)
				res.writeHead(200, header)
				stream.pipe(res)
				return
			}

			// lets fetch the root
			var pkg = await package('index.html', root).catch do(){
				console.log("Exception!")
				res.writeHead(501)
				res.end()
			}

			// deflate it
			var data = await zlib.deflate(pkg)
			res.writeHead(200, header)
			res.write(data)
			res.end()
			fs.writeFile(cache_file, data)
			return
		}

		// read the file
		var data = await fs.readFile(fullpath).catch do(){
			log(`File not found ${fullpath}`)
			res.writeHead(404)
			res.end('File not found')
		}

		res.writeHead(200) do {"Content-Type": mime.fromFilename(fullpath)}
		res.write(data)
		res.end()
		watch(fullpath)
	}

	init( port, addr ){
		log(`Starting webserver on ${addr}:${port}`)
		super()
	}
}

new StaticServer( port, addr )
