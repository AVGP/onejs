#!/usr/bin/env node --harmony one_node.js

// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import nodejs
import htmlscraper
import math

var live = 0
if(live == 2){
	var addr = "0.0.0.0"
	var port = 2000
}
else if(live){
	var addr = "0.0.0.0"
	var port = 80
}
else{
	var addr = "0.0.0.0"
	var port = 2000
}

var fs_root = Path.resolve(__dirname)

class StaticServer extends HttpServer{

	// lets package our app
	package( file, root ){
		var html = await fs.readFile(file)
		var tree = HTMLScraper.parse(html)

		// lets inline each script tag
		for(var script from tree.html.head.script){
			if(script.$src){
				if(script.$src == 'reloader.js'){
					delete script.$src
					continue
				}
				var file = await fs.readFile(script.$src)
				delete script.$src
				script.text = file.toString()
			}
		}

		// recursively find all our dependencies
		var onejs = {}
		function fetch(file){
			var code = await fs.readFile(file + '.n')
			onejs[file] = code.toString()
			var ast = parse('->{' + code + '\n}')
			for(var dep from AST.getDependencies(ast)){
				await fetch(dep)
			}
		}
		await fetch(root)

		// add new tags 
		for(var file in onejs) tree.html.head.appendChild() do {
			tagname:'script'
			$type: 'text/onejs'
			$id: file == root ? 'main' : file
			text: onejs[file]
		}
		// ok first lets stringify it again.
		return tree.toString()
	}

	route("/_reloader_") do( req, res ){
		setTimeout(15000) on(){
			res.writeHead(204)
			res.end()			
		}
		(pending ?= []).push(res)
	}

	route("/pull") do( req, res ){
		out('Updating and clearing cache!')
		child_process.exec('git pull')
		child_process.exec('rm -rf cache/cache_*')
		res.writeHead(200)
		res.end()
	}

	route("/bake") do( req, res ){
		out('Received bake')
		var file = fs.createWriteStream('bake.glf')
		req.on('data') do(v){
			file.write(v)
		}
		req.on('end') do(){
			file.end()
			res.writeHead(200)
			res.end()
		}
	}


	if(live) route("/") do( req, res ){
		var host = req.headers.host
		var root = ''

		if(typeof host !== 'string' || host.indexOf('localhost') == 0) root = 'index'
		else{
			var m = host.match(/(.*)\.onejs\.io/i)
			if(!m || !m[1]) root = 'tests/jsconf'
			else root = m[1].split(/\./).reverse().join('/')
		}
		if(live == 2) root = 'test_scene'
		var cache_file = 'cache/cache_'+root.replace(/\//g,'_')
		var exist = await fs.exists(cache_file)
		var header = {
			"Cache-control":"max-age=0"
			"Content-Type": "text/html"
			"Content-encoding":"deflate"
		}
		if(exist){
			var stat = await fs.stat(cache_file)
			header.ETag = stat.mtime.getTime()+'_'+stat.ctime.getTime()+'_'+stat.size
			if( req.headers['if-none-match'] == header.ETag){
				res.writeHead(304,header)
				res.end()
				return 
			}
			out('Loading cached ' + cache_file)
			var stream = fs.createReadStream(cache_file)
			res.writeHead(200, header)
			stream.pipe(res)
			return
		}

		// lets fetch the root
		var pkg = await package('index.html', root).catch do(e){
			out("Exception!",e)
			res.writeHead(501)
			res.end()
		}

		// deflate it
		var data = await zlib.deflate(pkg)
		res.writeHead(200, header)
		res.write(data)
		res.end()
		fs.writeFile(cache_file, data)
	}

	route(/.*/) do( req, res ){
		var path = req.url.pathname
		if(path == '/') path = 'index.html'
		var fullpath = Path.join(fs_root, path)

		out(`Reading ${path}`)
		var header =  {
			"Cache-control":"max-age=0"
			"Content-Type": mime.fromFilename(fullpath),
			"Content-encoding":"deflate"
		}

		// read and return the file
		var exist = await fs.exists(fullpath)
		if(!exist){
			res.writeHead(404)
			console.log('file not found', path)
			res.end('File not found')
			return
		}
		// lets read the stat
		var stat = await fs.stat(fullpath)

		var cache_file = Path.join(fs_root, 'cache/cache_'+path.replace(/[\.\\\/]/g,'_')+'_'+stat.mtime.getTime()+'_'+stat.ctime.getTime())

		header.ETag = stat.mtime.getTime()+'_'+stat.ctime.getTime()+'_'+stat.size

		if( req.headers['if-none-match'] == header.ETag){
			res.writeHead(304,header)
			res.end()
			console.log('304', path)
			return 
		}

		var cache_exist = await fs.exists(cache_file)
		if(cache_exist){
			var stream = fs.createReadStream(cache_file)
			res.writeHead(200, header)
			stream.pipe(res)
			console.log('sending', path)
			return
		}

		var data = await fs.readFile(fullpath)
		var compr = await zlib.deflate(data)
		res.writeHead(200, header)
		res.write(compr)
		res.end()
		fs.writeFile(cache_file, compr)
		watch(fullpath)
	}

	watch( path ){

		files ?= {}
		if(files[path]) return

		files[path] = fs.watchFileFast(path) do(){
			out("---- " + path + " changed, sending reload to frontend ----" )
			for(var res of pending){
				res.writeHead(200)
				res.end('Reload')
			}
			pending = []
		}
	}

	constructor( port, addr ){
		out(`Starting webserver on ${addr}:${port}`)
		HttpServer::constructor(port, addr)
		await fs.mkdir(Path.join(fs_root,'cache'))
	}
}

StaticServer.new( port, addr )
