import math
import glscene
import codeview
import edit
import text_chunked

class CodeEdit extends Layer{

	class CodeFormatter{
		load(MemoryTaggedTextImpl)
		load(CodeViewTypes)
		load(CodeViewImpl)
		constructor(){
			text_initialized = true
			MemoryTaggedTextImpl::constructor()
			CodeViewImpl::constructor()
		}
		format(ast){
			this.ast = ast
		}
	}

	load(ChunkedTextLayerImpl)
	load(CodeViewTypes)
	load(CodeViewImpl)
	load(EditImpl)
	
	processInsert(lo, hi, text){
		var cdelta = 0
		if(text == ')'){
			if(charCode(lo) == 41) text = '', cdelta = 1
		}
		else if(text == ']'){
			if(charCode(lo) == 93) text = '', cdelta = 1
		}
		else if(text == '}'){
			if(charCode(lo) == 125) text = '', cdelta = 1
		}
		else if(text == '('){
			cdelta = -1
			text += ')'
		}
		else if(text == '['){
			cdelta = -1
			text += ']'
		}
		else if(text == '{'){
			if(lo != hi){
				// do something special
			}
			cdelta = -1
			text += '}'
		}
		else if(text == '\n'){ // autoindent code
			var i = hi
			var state = 0
			var indent = 0
			var split = 0
			while(charCode(i) == 9){
				i++
				indent--
			}
			if(charCode(i) == 125 && charCode(i-1) == 123){
				i++, split = 1
			}
			while(i<char_count){
				var code = charCode(i)
				if(state == 0 && code == 123) indent--
				if(state == 1){
					if(code == 9 || code == 125) indent++
					else break
				}
				if(code == 10) state = 1
				i++
			}
			if(indent>0){
				if(split){
					text += Array(indent+2).join('\t') + '\n' + Array(indent+1).join('\t')
					cdelta = -1 - indent
				}
				else{
					text += Array(indent+1).join('\t')
				}
			}
		}
		return [text, cdelta]
	}
	
	change(){
		if(change == 1){
			if(step_timeout) clearTimeout(step_timeout)
			step_timeout = thisTimeout(parseStep,0)
		}
	}

	parseStep(){
		var dt = Date.now()
		step_serialized = serializeText()
		// okay.. so we parse it, we get an error. now what.
		step_ast = parseLive(step_serialized)
		//console.log('----parseStep! '+(Date.now()-dt))
		step_timeout = thisTimeout(astgenStep,0)
	}

	astgenStep(){
		var dt = Date.now()
		code_formatter.setSize(step_serialized.length)
		code_formatter.clear()
		code_formatter.ast = step_ast
		//console.log(code_formatter.serializeText())
		//console.log('astgenStep! '+(Date.now()-dt))
		step_timeout = thisTimeout(diffStep,0)
	}

	diffStep(){
		var dt = Date.now()
		// lets diff our code_formatter.output
		// against our textbuffer, whilst updating colors
		// and then we remove/insert the delta.
		// ok lets first try to do it wholesale
		var range = diffTags(code_formatter.output)
		if(range){ // remove a range, and insert a range
			var delta = 0
			// if what we do is essentially undo the last action, dont do it
			var last = undo_stack[undo_stack.length-1]
			
			if(last.type == 'delete' && last.end == range.my_end+1) return
			if(last.type == 'insert' && last.start == range.my_end+1) return
			//console.log(last.type, last, range)
			//if(last.type == 'delete' && last.end == range.my_start)

			if(range.my_start<=range.my_end){
				delta -= range.my_end + 1-range.my_start
				undo_group++
				addUndoInsert(range.my_start, range.my_end+1)
				removeText(range.my_start, range.my_end+1)
			}
			//console.log(range.my_start, range.my_end)
			if(range.other_start <= range.other_end){
				var inslice = code_formatter.output.slice(range.other_start, range.other_end+1)
				delta += range.other_end + 1 - range.other_start
				code_formatter.output = inslice
				//console.log('delta',code_formatter.serializeText())
				insertText(range.my_start, inslice)
				addUndoDelete(range.my_start, range.my_start+inslice.length)
			}
			// we should now move all cursors > x by delta
			cursors.moveAll(range.my_start-1, delta)
		}
		//console.log(range)
		//console.log('diffStep! '+(Date.now()-dt))
		step_timeout  = thisTimeout(applyStep,0)
	}

	applyStep(){
		// and now we update it.

		//console.log('applyStep!')
		step_timeout = 0
	}

	constructor(){
		Layer::constructor()
		ChunkedTextLayerImpl::constructor()
		CodeViewImpl::constructor()
		EditImpl::constructor()
		_sortChunks()

		code_formatter = CodeFormatter.new()
	}
}