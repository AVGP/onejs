import math
import glscene
import codeview
import edit
import text_chunked

class CodeEdit extends Layer{

	load(ChunkedTextLayerImpl)
	load(CodeViewTypes)
	load(CodeViewImpl)
	load(EditImpl)

	processInsert(lo, hi, text){
		var cdelta = 0
		if(text == ')'){
			if(charCode(lo) == 41) text = '', cdelta = 1
		}
		else if(text == ']'){
			if(charCode(lo) == 93) text = '', cdelta = 1
		}
		else if(text == '}'){
			if(charCode(lo) == 125) text = '', cdelta = 1
		}
		else if(text == '('){ // insert a 
			cdelta = -1
			text += ')'
		}
		else if(text == '['){ // insert a 
			cdelta = -1
			text += ']'
		}
		else if(text == '{'){ // insert a 
			cdelta = -1
			text += '}'
		}
		else if(text == '\n'){ // autoindent code
			var i = hi
			var state = 0
			var indent = 0
			var split = 0
			while(charCode(i) == 9){
				i++
				indent--
			}
			if(charCode(i) == 125 && charCode(i-1) == 123){
				i++, split = 1
			}
			while(i<char_count){
				var code = charCode(i)
				if(state == 1){
					if(code == 9 || code == 125) indent++
					else break
				}
				if(code == 10) state = 1
				i++
			}
			if(indent>0){
				if(split){
					text += Array(indent+2).join('\t') + '\n' + Array(indent+1).join('\t')
					cdelta = -1 - indent
				}
				else{
					text += Array(indent+1).join('\t')
				}
			}
		}
		return [text, cdelta]
	}

	constructor(){
		Layer::constructor()
		ChunkedTextLayerImpl::constructor()
		CodeViewImpl::constructor()
		EditImpl::constructor()
		_sortChunks()
	}
}