/*
 * Parts copyright 2012 Google, Inc. All Rights Reserved.
 * Parts copyright 2014 OneJS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Google Author(s): Behdad Esfahbod, Maysum Panju
 */

import math
import gl
import network

class Glyphy{

	class Atlas extends Texture{
		lookup:(int offset, ivec2 _atlas_pos){
			//ivec4 atlas = u_atlas_info
			//ivec2 item_geom = atlas.zw
			vec2 pos =(vec2(_atlas_pos.xy * u_item_geom +
				ivec2(mod(float(offset), u_item_geom_x), offset / u_item_geom.x)) +
				vec2(.5, .5)) / u_atlas_size

			return texture2D(this, pos, {
				MIN_FILTER:NEAREST
				MAG_FILTER:NEAREST
				WRAP_S:CLAMP_TO_EDGE
				WRAP_T:CLAMP_TO_EDGE
			})
		}
	}

	// give it some default info for the compiler
	u_item_geom_x = 0.
	u_item_geom = ivec2(0,0)
	u_atlas_size = vec2(0,0)

	//u_boldness: 0.25*(sin(4time.sec+mesh[].x+mesh[].y))
	u_boldness = 0.1
	u_gamma_adjust = 1
	u_outline = false
	u_debug = false
	u_contrast = 1.
	u_outline_thickness = 2

	// type mark it
	mesh = vec4[]()

	fgcolor: #white//img.sample(mod(pixel mesh[].xy,vec2(1.,1.))).rgb

	displace: 0.

	up:pixel mesh[].xy
	vertex: mesh[].xy
	glyphy_pos: mesh[].xy
	glyphy_color: glyphy_draw(pixel mesh[])

	pixel: glyphy_color

	// just for the compiler
	glyphy_atlas = Atlas

	// global font cache
	glyphy_font_cache = {}

	font = 'fonts/code_font1_ascii.glf'
	font_size = 1
	value = ''

	constructor(){
		var info = glyphy_font_cache[font]
		if(!info){
			glyphy_font_cache[font] = signal{
				http.getbinary(font).then do (value){
					// lets parse the font
					vuint16 = new Uint16Array(value)
					vuint32 = new Uint32Array(value)
					vfloat32 = new Float32Array(value)
					vuint8 = new Uint8Array(value)

					if(vuint32[0] != 0x01F01175){
						throw new Error('Error in font file')
					}

					var info = glyphy_info = {}

					// lets parse the glyph set
					info.tex_w = vuint16[2]
					info.tex_h = vuint16[3]
					info.item_w = vuint16[4]
					info.item_h = vuint16[5]

					var length = info.count = vuint32[3] / (7*4)

					if(length>10000) throw new Error('Font seems incorrect')
					var off = 4

					var glyphs = info.glyphs = {}

					for(var i = 0;i<length;i++){
						var unicode = vuint32[off++]
						glyphs[unicode] = {
							min_x: vfloat32[off++]
							min_y: vfloat32[off++]
							max_x: vfloat32[off++]
							max_y: vfloat32[off++]
							advance: vfloat32[off++]
							nominal_w: vuint8[off*4]
							nominal_h: vuint8[off*4+1]
							atlas_x: vuint8[off*4+2]
							atlas_y: vuint8[off*4+3]
						}
						off++
					}

					u_item_geom_x = info.item_w
					u_item_geom = ivec2(info.item_w, info.item_h)
					u_atlas_size = vec2(info.tex_w, info.tex_h)

					info.atlas = Atlas.array(value.slice(off * 4), info.tex_w, info.tex_h)
					// lets go and generate some glyphs!
					signal.end(info)
					updateGeometry(info)
				}
			}
		}
		else if(info._signal_){
			info.then do(info){
				updateGeometry(info)
			}
		} 
		else updateGeometry(info)
	}

	updateGeometry(info){
		if(info){
			u_item_geom_x = info.item_w
			u_item_geom = ivec2(info.item_w, info.item_h)
			u_atlas_size = vec2(info.tex_w, info.tex_h)
			glyphy_atlas = info.atlas
			glyphy_info = info
		}
		if(!glyphy_info) return
		var length = value.length

		// alloc a buffer
		vec4[] buf = vec4[length * 6]()
		var o = 0
		var px = 0
		var py = font_size
		// alright lets convert some text babeh!
		for(var i = 0; i < length; i++){
			var unicode = value.charCodeAt(i)
			if(unicode == 10){
				px = 0
				py += font_size
				continue
			}
			var glyph = glyphy_info.glyphs[unicode]
			if(!glyph){
				px += glyphy_info.glyphs[34].max_x
				continue
			}

			// 0___14 
			// |   /|
			// |  / |
			// | /  |
			// |/   | 
			// 23---5
			// lets add some vertices
			var gx = ((glyph.atlas_x<<6) | glyph.nominal_w)<<1
			var gy = ((glyph.atlas_y<<6) | glyph.nominal_h)<<1
			buf[o].x = px + font_size * glyph.min_x
			buf[o].y = py - font_size * glyph.min_y
			buf[o].z = gx
			buf[o].w = gy
			o++
			buf[o+3].x = buf[o].x = px + font_size * glyph.max_x
			buf[o+3].y = buf[o].y = py - font_size * glyph.min_y
			buf[o+3].z = buf[o].z = gx | 1
			buf[o+3].w = buf[o].w = gy
			o++
			buf[o+1].x = buf[o].x = px + font_size * glyph.min_x
			buf[o+1].y = buf[o].y = py - font_size * glyph.max_y
			buf[o+1].z = buf[o].z = gx
			buf[o+1].w = buf[o].w = gy | 1
			o+=3
			buf[o].x = px + font_size * glyph.max_x
			buf[o].y = py - font_size * glyph.max_y
			buf[o].z = gx | 1
			buf[o].w = gy | 1
			o++
			px += glyph.advance
			//console.log(o)
		}
		mesh = buf
	}	

	define GLYPHY_INFINITY 1e9
	define GLYPHY_EPSILON 1e-5
	define GLYPHY_MAX_NUM_ENDPOINTS 32

	struct glyphy_arc_t{
		vec2  p0
		vec2  p1
		float d
	}

	struct glyphy_arc_endpoint_t{
		/* Second arc endpoint */
		vec2  p
		/* Infinity if this endpoint does not form an arc with the previous
		 * endpoint.  Ie. a "move_to".  Test with glyphy_isinf().
		 * Arc depth otherwise.  */
		float d
	}

	struct glyphy_arc_list_t {
		/* Number of endpoints in the list.
		 * Will be zero if we're far away inside or outside, in which case side is set.
		 * Will be -1 if this arc-list encodes a single line, in which case line_* are set. */
		int num_endpoints

		/* If num_endpoints is zero, this specifies whether we are inside(-1)
		 * or outside(+1).  Otherwise we're unsure(0). */
		int side
		/* Offset to the arc-endpoints from the beginning of the glyph blob */
		int offset

		/* A single line is all we care about.  It's right here. */
		float line_angle
		float line_distance /* From nominal glyph center */
	}

	glyphy_isinf:(float v){
		return abs(v) >= GLYPHY_INFINITY * .5
	}

	glyphy_iszero:(float v){
		return abs(v) <= GLYPHY_EPSILON * 2.
	}

	glyphy_ortho:(vec2 v){
		return vec2(-v.y, v.x)
	}

	glyphy_float_to_byte:(float v){
		return int(v *(256. - GLYPHY_EPSILON))
	}

	glyphy_vec4_to_bytes:(vec4 v){
		return ivec4(v *(256. - GLYPHY_EPSILON))
	}

	glyphy_float_to_two_nimbles:(float v){
		int f = glyphy_float_to_byte(v)
		return ivec2(f / 16, int(mod(float(f), 16.)))
	}

	/* returns tan(2 * atan(d)) */
	glyphy_tan2atan:(float d){
		return 2. * d /(1. - d * d)
	}

	glyphy_arc_endpoint_decode:(vec4 v, ivec2 nominal_size){
		vec2 p =(vec2(glyphy_float_to_two_nimbles(v.a)) + v.gb) / 16.
		float d = v.r
		if(d == 0.) d = GLYPHY_INFINITY
		else d = float(glyphy_float_to_byte(d) - 128) * .5 / 127.
		return glyphy_arc_endpoint_t(p * vec2(nominal_size), d)
	}

	glyphy_arc_center:(glyphy_arc_t a){
		return mix(a.p0, a.p1, .5) +
		 glyphy_ortho(a.p1 - a.p0) /(2. * glyphy_tan2atan(a.d))
	}

	glyphy_arc_wedge_contains:(glyphy_arc_t a, vec2 p){
		float d2 = glyphy_tan2atan(a.d)
		return dot(p - a.p0,(a.p1 - a.p0) * mat2(1,  d2, -d2, 1)) >= 0. &&
		 dot(p - a.p1,(a.p1 - a.p0) * mat2(1, -d2,  d2, 1)) <= 0.
	}

	glyphy_arc_wedge_signed_dist_shallow:(glyphy_arc_t a, vec2 p){
		vec2 v = normalize(a.p1 - a.p0)

		float line_d = dot(p - a.p0, glyphy_ortho(v))// * .1abs on sin(time.sec+p.x)
		if(a.d == 0.) 
			return line_d

		float d0 = dot((p - a.p0), v)
		if(d0 < 0.) 
			return sign(line_d) * distance(p, a.p0) 

		float d1 = dot((a.p1 - p), v)
		if(d1 < 0.) 
			return sign(line_d) * distance(p, a.p1)

		float r = 2. * a.d *(d0 * d1) /( d0 + d1)
		if(r * line_d > 0.) 
			return sign(line_d) * min(abs(line_d + r), min(distance(p, a.p0), distance(p, a.p1)))
		return line_d + r
	}

	glyphy_arc_wedge_signed_dist:(glyphy_arc_t a, vec2 p){
		if(abs(a.d) <= .03) return glyphy_arc_wedge_signed_dist_shallow(a, p)
		vec2 c = glyphy_arc_center(a)
		return sign(a.d) *(distance(a.p0, c) - distance(p, c))
	}

	glyphy_arc_extended_dist:(glyphy_arc_t a, vec2 p){
		/* Note: this doesn't handle points inside the wedge. */
		vec2 m = mix(a.p0, a.p1, .5)
		float d2 = glyphy_tan2atan(a.d)
		if(dot(p - m, a.p1 - m) < 0.)
			return dot(p - a.p0, normalize((a.p1 - a.p0) * mat2(+d2, -1, +1, +d2)))
		else
			return dot(p - a.p1, normalize((a.p1 - a.p0) * mat2(-d2, -1, +1, -d2)))
	}

	glyphy_arc_list_offset:(vec2 p, ivec2 nominal_size){
		ivec2 cell = ivec2(clamp(floor(p), vec2(0.,0.), vec2(nominal_size - 1)))
		return cell.y * nominal_size.x + cell.x
	}

	glyphy_arc_list_decode:(vec4 v, ivec2 nominal_size){
		glyphy_arc_list_t l
		ivec4 iv = glyphy_vec4_to_bytes(v)
		l.side = 0 /* unsure */

		if(iv.r == 0) { /* arc-list encoded */
			l.offset = (iv.g * 256) + iv.b
			l.num_endpoints = iv.a
			if(l.num_endpoints == 255) {
				l.num_endpoints = 0
				l.side = -1
			} 
			else if(l.num_endpoints == 0){
				l.side = 1
			}
		} 
		else { /* single line encoded */
			l.num_endpoints = -1
			l.line_distance = float(((iv.r - 128) * 256 + iv.g) - 0x4000) / float(0x1FFF)
											* max(float(nominal_size.x), float(nominal_size.y))
			l.line_angle = float(-((iv.b * 256 + iv.a) - 0x8000)) / float(0x7FFF) * 3.14159265358979
		}
		return l
	}

	glyphy_antialias:(float d){
		return smoothstep(-.75, +.75, d)
	}

	glyphy_arc_list:(vec2 p, ivec2 nominal_size, ivec2 _atlas_pos){
		int cell_offset = glyphy_arc_list_offset(p, nominal_size)
		vec4 arc_list_data = glyphy_atlas.lookup(cell_offset, _atlas_pos)
		return glyphy_arc_list_decode(arc_list_data, nominal_size)
	}

	glyphy_sdf:(vec2 p, ivec2 nominal_size, ivec2 _atlas_pos){

		glyphy_arc_list_t arc_list = glyphy_arc_list(p, nominal_size, _atlas_pos)

		/* Short-circuits */
		if(arc_list.num_endpoints == 0) {
			/* far-away cell */
			return GLYPHY_INFINITY * float(arc_list.side)
		} 
		if(arc_list.num_endpoints == -1) {
			/* single-line */
			float angle = arc_list.line_angle 
			vec2 n = vec2(cos(angle), sin(angle))
			return dot(p -(vec2(nominal_size) * .5), n) - arc_list.line_distance
		}

		float side = float(arc_list.side)
		float min_dist = GLYPHY_INFINITY
		glyphy_arc_t closest_arc

		glyphy_arc_endpoint_t endpoint_prev, endpoint
		endpoint_prev = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset, _atlas_pos), nominal_size)
		for(int i = 1; i < GLYPHY_MAX_NUM_ENDPOINTS; i++){
			if(i >= arc_list.num_endpoints) {
				break
			}

			endpoint = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset + i, _atlas_pos), nominal_size)
			glyphy_arc_t a = glyphy_arc_t(endpoint_prev.p, endpoint.p, endpoint.d)
			endpoint_prev = endpoint
			
			if(glyphy_isinf(a.d)) continue

			if(glyphy_arc_wedge_contains(a, p)) {
				float sdist = glyphy_arc_wedge_signed_dist(a, p)
				float udist = abs(sdist) * (1. - GLYPHY_EPSILON)
				if(udist <= min_dist) {
					min_dist = udist 
					side = sdist <= 0. ? -1. : +1.
				}
			} 
			else {
				float udist = min(distance(p, a.p0), distance(p, a.p1))
				if(udist < min_dist) {
					min_dist = udist
					side = 0. /* unsure */
					closest_arc = a
				}
				else if(side == 0. && udist == min_dist) {
					/* If this new distance is the same as the current minimum,
					* compare extended distances.  Take the sign from the arc
					* with larger extended distance. */
					float old_ext_dist = glyphy_arc_extended_dist(closest_arc, p)
					float new_ext_dist = glyphy_arc_extended_dist(a, p)

					float ext_dist = abs(new_ext_dist) <= abs(old_ext_dist) ?
						old_ext_dist : new_ext_dist

					//#ifdef GLYPHY_SDF_PSEUDO_DISTANCE
					/* For emboldening and stuff: */
					min_dist = abs(ext_dist)
					//#endif
					side = sign(ext_dist)
				}
			}
		}

		if(side == 0.) {
			// Technically speaking this should not happen, but it does.  So try to fix it.
			float ext_dist = glyphy_arc_extended_dist(closest_arc, p)
			side = sign(ext_dist)
		}

		return min_dist * side
	}

	glyphy_point_dist:(vec2 p, ivec2 nominal_size, ivec2 _atlas_pos){
		glyphy_arc_list_t arc_list = glyphy_arc_list(p, nominal_size, _atlas_pos)

		float side = float(arc_list.side)
		float min_dist = GLYPHY_INFINITY

		if(arc_list.num_endpoints == 0)
			return min_dist

		glyphy_arc_endpoint_t endpoint_prev, endpoint
		endpoint_prev = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset, _atlas_pos), nominal_size)
		for(int i = 1; i < GLYPHY_MAX_NUM_ENDPOINTS; i++) {
			if(i >= arc_list.num_endpoints) {
				break
			}
			endpoint = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset + i, _atlas_pos), nominal_size)
			if(glyphy_isinf(endpoint.d)) continue
			min_dist = min(min_dist, distance(p, endpoint.p))
		}
		return min_dist
	}

	glyph_vertex_transcode:(vec2 v){
	  ivec2 g = ivec2 (v)
	  ivec2 corner = ivec2 (mod (v, 2.))
	  g /= 2
	  ivec2 nominal_size = ivec2 (mod (vec2(g), 64.))
	  return vec4(corner * nominal_size, g * 4)
	}

	glyphy_draw:(vec4 force){
		vec4 glyph = glyph_vertex_transcode(mesh[].zw)
		ivec2 nominal_size = (ivec2(mod(glyph.zw, 256.)) + 2) / 4
		ivec2 atlas_pos = ivec2(glyph.zw) / 256

		vec2 p = glyph.xy
		/* isotropic antialiasing */
		vec2 dpdx = dFdx(p) // this should mark it pixel and redo the function with a new highmark
		vec2 dpdy = dFdy(p)
		float m = length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2

		vec4 out_color = vec4(color,1)//vec4(1,1,1,1)

		float gsdist = glyphy_sdf(p, nominal_size, atlas_pos) + displace
		float sdist = gsdist / m * u_contrast

		if(!u_debug) {

			sdist -= u_boldness * 10.
			
			if(u_outline)
				sdist = abs(sdist) - u_outline_thickness * .5

			if(sdist > 1.)
				discard

			float alpha = glyphy_antialias(-sdist)
			
			if(u_gamma_adjust != 1.)
				alpha = pow(alpha, 1./u_gamma_adjust)
			
			//ivec2 item_geom = u_atlas_info.xy
			//color = vec4(float(item_geom.x) / 2048.,0.,0,1.)		
			out_color = vec4(out_color.rgb, out_color.a * alpha)
		} 
		else {
			out_color = vec4(0,0,0,0)

			// Color the inside of the glyph a light red
			out_color += vec4(.5,0,0,.5) * smoothstep(1., -1., sdist)

			float udist = abs(sdist)
			float gudist = abs(gsdist)
			// Color the outline red
			out_color += vec4(1,0,0,1) * smoothstep(2., 1., udist)
			// Color the distance field in green
			if(!glyphy_isinf(udist))
				out_color += vec4(0,.4,0,.4 -(abs(gsdist) / max(float(nominal_size.x), float(nominal_size.y))) * 4.)

			float pdist = glyphy_point_dist(p, nominal_size, atlas_pos)
			// Color points green
			out_color = mix(vec4(0,1,0,.5), out_color, smoothstep(.05, .06, pdist))

			glyphy_arc_list_t arc_list = glyphy_arc_list(p, nominal_size, atlas_pos)
			// Color the number of endpoints per cell blue
			out_color += vec4(0,0,1,.1) * float(arc_list.num_endpoints) * 32./255.
		}

		return out_color
	}
}