// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
// ONEJS Track, Time and animation
class Track extends Proxy{

	chain = 1

	// called by the signal when cleaning up
	$_sigunbind( pthis, key )->{
		if(time){
			time.unbind( this )
			time = undefined
		}
	}
	
	// called by the signal on assign
	$_sigbind( pthis, key, valkey, old ){
		// if we have an old track we have to chain
		if( old && old.chainTrack ){
			// we have to re-hook the playing track
			if(!old.prev) (old.time = pthis.$.time).bind( old )
			old.chainTrack( this )
			return this
		}

		var keys = []
		var dims = 0
		for( var k in this ){
			if( parseFloat( k ) == k ){ // its a keyframe thing
				// check what we have, if its an array or a number
				keys.push( parseFloat( k ) )
				var value = this[ k ]

				if( Array.isArray( value ) ){
					
					for( var i = 0; i < value.length; i++ ){
						if( typeof value[i] != 'number' ){
							this.signal( k )
							// try to read dimensions
							var arr = this[ '__' + k ]
							if( arr && arr.length && dims < arr.length) dims = arr.length
							break
						}
					}
					
					if( dims < i ) dims = i
				}
				else 
				if( typeof value == 'number' ){
					if( 1 > dims ) dims = 1
				} 
				else if ( typeof value != 'function' ) this.signal( k )                    
			}
		}
		
		// lets check if we have a 0
		if (!('0' in this)){
			var empty = 0
			var val0 = pthis[ valkey ]

			if( Array.isArray(val0) && val0.length > dims ) dims = val0.length
			
			if(!val0 && dims > 1){
				empty = []
				for(var i = 0 ;i<dims;i++) empty.push(0)
			}
			this[0] = val0 || empty
			keys.push(0)
		}
		
		this.valkey = valkey
		this.keys = keys.sort()
		this.pthis = pthis 
		this.key = key
		this.dims = dims
		this.last = keys[ keys.length - 1 ]
		var time = this.time = pthis.$.time
		this.start = -1
		this.delta = ONE.mouseinterp
		this.lastidx = 0
		time.bind( this )
		
		return this
	}

	ease = 'linear'

	chainTrack(newtrk){
		// we are already terminated
		if( !this.prev && !this.time ){ 
			if( this.pthis ) newtrk.$_sigbind( this.pthis, this.key, this.first )
			return
		}
		// the new track allows chaining
		if( newtrk.chain >0 ){
			this.next = newtrk
			newtrk.prev = this
			return
		} 
		// otherwise the new track needs to hook 'terminate'
		// skipping the current track to its end-frame before
		// switching to the new track
		var p = this
		while( p.prev ) p = p.prev // seek up to the root playing track
		p.next = p.term = newtrk
		newtrk.prev = p
	}

	// calculate current value, called by Time
	calculate(secs){
		this.oncecalculated = true
		// we have a speed, a loop and a total
		if( this.start < 0 ) this.start = secs + (this.delta || 0)
		var local = ( secs - this.start ) * ( this.speed || 1 )
		var loop = this.loop || 0
		var last = this.last 
		var loopx = Math.floor( local / last )
		var mytime = local % last
		var stop = 0
		
		if( loop >= 0 ){
			if( loopx > loop ) mytime = last, stop = 1
		} 
		else if ( loop < 0 ){ // bounce looping
			if( loopx & 1 ) { // backwards
				mytime = last - mytime
				if( loopx > -loop ) mytime = last, stop = 1
			} else { // forwards
				if( loopx > -loop ) mytime = 0, stop = 1
			}
		}
		// now we map mytime through the easing function
		mytime = this.$.easing[this.ease]( mytime / last ) * last

		if( this.term ) {
			stop = 1
			// if chain is < 0 we terminate where we are
			// otherwise we skip to animation end
			if( this.term.chain == 0 ) mytime = last
		}
		// alright we have to find the 2 keys we are inbetween
		var keys = this.keys
		// determine if we have to scan forwards or backwards from lastidx

		// the index we want is always > mytime, but has a key before it
		// that is < mytime
		var idx = this.lastidx
		var lastidx = idx
		
		// scan forward if we have to
		while( idx < keys.length && mytime >= keys[ idx ] ) idx ++
		// scan backwards if we have to
		while( idx > 0 && mytime < keys[ idx - 1 ] ) idx --

		// our target
		var pthis = this.pthis
		var key = this.key
		var dims = this.dims

		if( dims == 0 ){ // event track
			if( idx != lastidx ){
				var value = this[ idx ]
				if(typeof value == 'function'){
					value.call(pthis)
				} 
				else if (typeof value == 'object'){
					pthis.apply( value )
				} else throw new Error("Event track contains non callable things at "+keys[ idx ])
			}
		} 
		else if( dims == 1 ){ // number track
			var setter = pthis.__lookupSetter__( key )

			if( idx === 0 ){ // 
				// we should always only fetch the computed number or if we have it
				setter.call(pthis, '__0' in this ? this.__0 : this[0], true )
			} 
			else if( idx === keys.length ){ // return the last key value
				var i = keys[ idx - 1 ]
				var ckey = '__' + i
				setter.call(pthis, ckey in this ? this[ckey] : this[i], true )
			}
			else { // interpolate between idx-1 and idx
				var i1 = keys[ idx - 1 ]
				var i2 = keys[ idx ] 
				var ckey1 = '__' + i1
				var ckey2 = '__' + i2
				var val1 = ckey1 in this ? this[ckey1] : this[i1]
				var val2 = ckey2 in this ? this[ckey2] : this[i2]
				// lets calculate our relative position
				var fac = ( mytime - i1 ) / ( i2 - i1 )
				// this calls the setter..
				setter.call( pthis, val1 * ( 1.0 - fac )  + val2 * fac, true )
			}
		} 
		else { // we are a vector track
			var setter = pthis.__lookupSetter__( key )
	
			if( idx === 0 ){
				// we should assign to our key using the track
				setter.call( pthis, '__0' in this ? this.__0 : this[0], true)
			} 
			else if( idx === keys.length ){ // return the last key value
				var i = keys[ idx - 1 ]
				var ckey = '__' + i
				setter.call( pthis, ckey in this ? this[ckey] : this[i], true)
			}
			else { // interpolate between idx-1 and idx
				var i1 = keys[ idx - 1]
				var i2 = keys[ idx ] 
				var ckey1 = '__' + i1
				var ckey2 = '__' + i2
				var val1 = ckey1 in this ? this[ckey1] : this[i1]
				var val2 = ckey2 in this ? this[ckey2] : this[i2]
				// and interpolate.
				var fac = ( mytime - i1 ) / ( i2 - i1 )
				var mx = [] // todo, make less garbage here
				for( var i = 0; i< dims; i++){
					mx[i] = val1[i] * ( 1.0 - fac )  + val2[i] * fac
				}
				setter.call( pthis, mx, true )
			}
		}
		
		if( stop ){
			this.$_sigunbind()
			if( this.next ){
				this.next.prev = undefined
				// we now have to __sigbind__ the next one
				this.next.$_sigbind( pthis, key, this.valkey )
			}
		}
	}

	// hide our api
	this.hideProperties.apply(this, Object.keys( this ) )
}

class Time extends Proxy{
	// The Time object manages the playback of your tracks.
	signal sec = 0

	init:(){

		sec_anim(time)=>{
			sec = time
			//console.log(this.sec)
		}
		// register someone hooking our signal
		sec_hook(obj){
			list_sec ?= []
			if(list_sec.push(obj) == 1){
				var o = obj.parent
				while(o){
					if(o.anim_hook){
						sec_hooked = o
						o.anim_hook(sec_anim)
						break
					}
					o = o.parent
				}
			}
		}

		// unhook register
		sec_unhook(obj){
			if(!list_sec) throw new Error('undefined unhook')
			list_sec.splice(list_sec.indexOf(obj), 1)
			if(!list_sec.length){
				sec_hooked.anim_unhook(sec_anim)
			}
		}
	}

	init2(){
		tracks = []
		swap = []
		slaves = []
		start = -1
	}

	// set or slave the time tracker object
	hookScope( where ){
		if( where.$.time ){ // slave ourselves to the higher up tracker
			if(where.$.hasOwnProperty('time')) throw new Error("When making new trackers, please do it on a new scope")
			this.owner = where.$.time
			where.$.time = this
			this.owner.slaves.push( this )
		} 
		else {
			where.$.time = this
			this.handle = this.animframe( this.execute )
			this.handle.request()
		}
	}
	
	// run all tracks at a timestamp (in msec)
	execute( msec ){
		if( this.start < 0 ) this.start = msec

		var sec = this.sec = ( msec - this.start ) / 1000
		// walk through animation tracks whilst 
		// accepting dynamic unregisters and registers efficiently
		var tracks = this.tracks
		var swap = this.swap
		var len = 0
		for( var i = 0; i < tracks.length; i++ ){
			var track= tracks[ i ]
			if( track ){
				track.calculate( sec )
				swap[ len++ ] = tracks[ i ]
			}
		}
		// swap track buffers to limit gc
		swap.length = len
		this.tracks = swap
		this.swap = tracks
		
		// execute all slave trackers
		var slaves = this.slaves
		for( var i = 0; i < slaves.length; i++ ){
			slaves[i].execute( this.__msec )
		}
		if( this.getHooks('sec') || ( len != 0 && this.handle ) ) 
			this.handle.request()
	}
	
	// called by track.bind
	dobind( track ){
		this.tracks.push( track )
		// make sure we run
		if( this.handle ) this.handle.request()
	}
	
	// called by track.unbind
	unbind( track ){
		var tracks = this.tracks
		var idx = tracks.indexOf( track )
		if( idx == -1 ) throw new Error("Cannot unregister track")
		tracks[ idx ] = undefined
	}
}
	
// Build Easing tables
class Easing{
	linear(t) -> t
	inQuad(t) -> t*t
	outQuad(t) -> -t*(t-2) 
	inOutQuad(t) -> (t/=0.5) < 1 ? 0.5*t*t : -0.5 * ((--t)*(t-2) - 1) 
	inCubic(t) -> t*t*t 
	outCubic(t) -> ((t=t-1)*t*t + 1) 
	inOutCubic(t) -> (t/=0.5) < 1 ? 0.5*t*t*t : 1 /2*((t-=2)*t*t + 2) 
	inQuart(t) -> t*t*t*t 
	outQuart(t) -> -((t=t-1)*t*t*t - 1) 
	inOutQuart(t) -> (t/=0.5) < 1 ? 0.5*t*t*t*t : -0.5 * ((t-=2)*t*t*t - 2) 
	inQuint(t) -> t*t*t*t*t 
	outQuint(t) -> ((t=t-1)*t*t*t*t + 1) 
	inOutQuint(t) -> (t/=0.5) < 1 ? 0.5*t*t*t*t*t : 0.5*((t-=2)*t*t*t*t + 2) 
	inSine(t) -> - Math.cos(t * (Math.PI/2)) + 1 
	outSine(t) -> Math.sin(t * (Math.PI/2)) 
	inOutSine(t) -> -0.5 * (Math.cos(Math.PI*t) - 1) 
	inExpo(t) -> (t==0)? 0: Math.pow(2, 10 * (t - 1)) 
	outExpo(t) -> (t==1)? 1: (-Math.pow(2, -10 * t) + 1) 
	inCirc(t) -> - (Math.sqrt(1 - t*t) - 1) 
	outCirc(t) -> Math.sqrt(1 - (t=t-1)*t) 
	inOutCirc(t) -> (t/=0.5) < 1? -0.5 * (Math.sqrt(1 - t*t) - 1): 0.5 * (Math.sqrt(1 - (t-=2)*t) + 1) 
	inOutExpo(t) ->{
		if (t==0) return 0
		if (t==1) return 1
		if ((t/=0.5) < 1) return 0.5 * Math.pow(2, 10 * (t - 1)) 
		return 0.5 * (-Math.pow(2, -10 * --t) + 2) 
	}
	inElastic(t)->{
		var s=1.70158, p=0, a=1;
		if (t==0) return 0
		if (t==1) return 1
		if (!p) p=0.3
		if (a < 1) { a=1; var s=p/4 }
		else var s = p/(2*Math.PI) * Math.asin (1/a)
		return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p )) 
	}
	outElastic(t)->{
		var s=1.70158, p=0, a=1
		if (t==0) return 0
		if (t==1) return 1
		if (!p) p=1*0.3
		if (a < 1) { a=1; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (1/a)
		return a*Math.pow(2,-10*t) * Math.sin( (t*1-s)*(2*Math.PI)/p ) + 1 
	}
	inOutElastic(t)->{
		var s=1.70158, p=0, a=1
		if (t==0) return 0
		if ((t/=0.5)==2) return 1
		if (!p) p=(0.3*1.5)
		if (a < 1) { a=1; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (1/a)
		if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p )) 
		return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p )*0.5 + 1 
	}
	inBack(t, s)->{
		if (s == undefined) s = 1.70158
		return (t/=1)*t*((s+1)*t - s) 
	}
	outBack(t, s)->{
		if (s == undefined) s = 1.70158
		return ((t=t/1-1)*t*((s+1)*t + s) + 1) 
	}
	inOutBack(t, s)->{
		if (s == undefined) s = 1.70158
		if ((t/=0.5) < 1) return 0.5*(t*t*(((s*=(1.525))+1)*t - s)) 
		return 0.5*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) 
	}
	inBounce(t) => 1 - outBounce (1-t) 
	outBounce(t)->{
		if (t < (1/2.75)) return (7.5625*t*t) 
		else if (t < (2/2.75)) return (7.5625*(t-=(1.5/2.75))*t + 0.75) 
		else if (t < (2.5/2.75)) return (7.5625*(t-=(2.25/2.75))*t + 0.9375) 
		return (7.5625*(t-=(2.625/2.75))*t + .984375) 
	}
	inOutBounce(t)=>{
		if (t < 0.5) return inBounce (t*2) * 0.5 
		return outBounce (t*2-1) * 0.5 + 0.5 
	}

	quad = outQuad
	cubic = inOutCubic
	quart = outQuart 
	quint = outQuint 
	sine = outSine 
	expo = outExpo
	elastic = outElastic
	circ = outCirc
	back = inOutBack
	bounce = outBounce
}
