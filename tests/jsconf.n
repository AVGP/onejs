import math
import gl
import glscene
import input
import slides
import codeview
import noise
import warps

Deck{
	antialias = true
	selected = 0
	anim_len = .5

	single_transition:(t, to_page){
		if(mod(to_page,2.) == 0.)
			return vec4(buf_prev.sample(zoom(rotate(hp, 10.*t*t), 1.+5.*t)).rgb, 1.-t)
		return vec4(buf_prev.sample(zoom(hp, 1.-t)).rgb, 1.-t)
	}

	Slide{
		Title{
			text = 'JSConf EU 2014!'
		}
		Body{
			pixel:mix(#black,#aero,abs on snoise3(4.p.x,4.p.y,0.1*time.sec))
		}
	}

	Slide{
		Title{
			text = 'Why'
		}
		Body{
			pixel:
				mix(#111,#444,abs on snoise3(3.p.x,3.p.y,0.1*time.sec))

			Bullet{
				x = 20
				y = 40
				font_marked = true
				text = "$0The $1Creative $0Power\n    of the $2GPU"
				style:(){
					var pos = marks[].xy
					var mark = marks[].z
					if(mark == 0.){
						u_color = #white
					}
					else if(mark == 1.){
						u_color = mix(#white,#red,abs on sin on length(pos-.5)*8. - 3.time.sec)
					}
					else if(mark == 2.){
						u_outline = true
						u_outline_thickness = 1. + .8sin(8.pos.x+8.*time.sec)
						u_color = mix(#orange,#aero,abs on sin(14.pos.x*sin(time.sec)) * sin(14.pos.y*sin(time.sec) + time.sec))
					}

				}
			}
			Bullet{
				x = 20
				y = 200
				text = "They are everywhere!"
			}
			Bullet{
				x = 20
				y = 300
				text = "GPUs are Hard"
			}
			Layer{
				pixel:#111
				alpha:0.8
				x = 20
				y = 400
				w:device.w - 80
				h:device.h - y - 140
				Codeview{
					font_size = 10
					u_boldness = 1.2
					ast = :(){
						var fs = gl.createShader(gl.FRAGMENT_SHADER)
						gl.shaderSource(fs, f)
						gl.compileShader(fs)
						if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) throw new Error(gl.getShaderInfoLog(fs))

						var vs = gl.createShader(gl.VERTEX_SHADER)
						gl.shaderSource(vs, v)
						gl.compileShader(vs)
						if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) throw new Error(gl.getShaderInfoLog(vs))

						sp = gl.createProgram()
						gl.attachShader(sp, vs)
						gl.attachShader(sp, fs)
						gl.linkProgram(sp)

						gl.bindTexture(gl.TEXTURE_2D, t)
						gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
						gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)
						gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false)
						gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false)
						gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c)
						gl.bindTexture(gl.TEXTURE_2D, null)
						gl.bindBuffer(gl.ARRAY_BUFFER, b)
						gl.bufferData(gl.ARRAY_BUFFER, a, gl.STATIC_DRAW)
						gl.vertexAttribPointer(cl, 2, gl.FLOAT, false, 0, 0);

						gl.useProgram(sp)
						gl.uniform1i(gl.getUniformLocation(sp, '_0'), 0)
						gl.activeTexture(gl.TEXTURE0)
						gl.bindTexture(gl.TEXTURE_2D, t)
						gl.enableVertexAttribArray(cl)
					}
				}
			}
		}
	}

	Slide{
		Title{
			text = 'Massive Parallelism'
		}
		Body{
			Bullet{
				font_size = 10
				x = -270
				y = 50
				ax = 6
				ay = 0
				sx: 0.4 + 6.*pow(8.) on abs on sin(.1time.sec)
				sy: 0.4 + 6.*pow(8.) on abs on sin(.1time.sec)
				font_marked = true
				style:(){
					var pos = marks[].xy
					var markxy = marks[].zw * vec2(1.,0.12) - vec2(8.,8.)

					var mark = floor(mod(length(markxy)-2.time.sec,6.))
					if(mark == 0.){
						u_color = #white
					}
					else if(mark == 1.){
						u_color = #orange
					}
					else if(mark == 2.){
						u_outline = true
						u_outline_thickness = 1. + .4sin(8.pos.x+8.*time.sec)
						u_color = #aero
					}
					else if(mark == 4.){
						u_outline = false
						//u_outline_thickness = 1. + .8sin(8.pos.x+8.*time.sec)
						u_color = #red
					}
					else if(mark == 5.){
						u_outline = true
						u_outline_thickness = 1. + .4sin(9.pos.y+2.*time.sec)
						u_color = #green
					}
				}
				var out = ''
				for(var j = 0;j<200;j++){
					for(var i = 0;i<17;i++) out += '|%'+j+'$'+(i)+'color = compute('+('00'+i).slice(-2)+','+('00'+j).slice(-2)+',t)'
					out += '\n'
				}
				text = out
			}
		}
	}

	Slide{
		Title{
			text = 'The Familiar'
		}
		Body{
			Codeview{
				ast:(){
					var x // its just JavaScript
					[3] // no semi colons!
					var [a,b,{x:y}] = call() // destructuring

					test(a, ...rest){ 
						var x = [...rest] // splats and rest arguments
					}

					class BaseClass{
						method = (arg){
							member = arg // this is automatic
						}
					}

					class SubClass extends BaseClass{
						method(arg){
							MyClass::method(arg) // super call
						}						
					}

					var x = SubClass.new() // new method, not operator
					x.method() do(){
						im_in_a_callback()  // callback outside ()
					}

				}
			}
		}
	}

	Slide{
		Title{
			text = 'The New'
		}
		Body{
			Codeview{
				ast:(){
					struct vec2{
						float x
						float y
					}

					vec2 t; // typed variables
			
					x = :y + 1 // symbolic expressions

					x = :(){
						quoted(expression) // symbolic function
					}

					my_symbolic_method:(){
						var i_only_exist = as_an_ast_node
					}

					MyClass{
						Div{
							background: #red // look familiar? 
						}
					}
				}
			}
		}
	}
	Slide{
		Title{ text = 'The Triangle' }
		Body{
			Codeview{
				x = 10
				y = 20
				// pull out the right node and eval it
				ast = :Device{
					Draw{
						mesh = vec2[3](-.5,-.75,0,.25,.5,-.75)
						vertex: mesh[]
						pixel: mix(#orange, #blue, mesh[].y +.75)
					}
				}
			}
			Layer{
				mesh = vec2[3](-.5,-.75,0,.25,.5,-.75)
				pixel: mix(#orange, #blue, mesh[].y +.75)
				x: parent.w - 400
				y: 150
				ax = 0
				ay = 0
				sx = 5
				sy = -4
			}
		}
	}

	Slide{
		Title{
			text = 'Scenegraph'
		}
		Body{
			var code = :Scene{
				Layer{
					w = 300
					h = 300
					background = Texture.url('tests/texture.jpg')
					pixel:background.sample(pixel mesh[])
					rz:sin(time.sec)*.1
					Layer{
						rz:time.sec
						pixel:mix(#blue, #orange, mesh[].y)
						Layer{
							w = 10
							h = 10
							pixel:#white
						}
					}
					Text{
						x: 10
						sx = sy = :1.+.3sin(time.sec)
						y: parent.h - 60
						font_size = 20
						//u_outline = true
						u_color = #orange
						text="Ugliest example ever"
					}
				}
			}

			Codeview{
				x = 10
				y = 20
				// pull out the right node and eval it
				ast = code
			}
			Layer{
				x:device.w -  400
				y:50
				eval(code.body, code)
			}
		}
	}

	Slide{
		var code = :Scene{
			var mouse = Mouse.new()
			Layer{
				w = 250
				h = 250
				x = 800
				y = 500
				pixel:#green
				vertex:mesh[] * (m_mesh * m_world *device.m_camera)
				mouse.leftdown()=>{
					x: mouse.x - .5 * w
					y: mouse.y - .5 * h
					pixel: mix4(#orange, #blue, #purple, #white, abs on sin(length(p-.5)-time.sec))
					alpha: 1.-2.*length(p-.5)
				}
				mouse.leftup()=>{
					x = mouse.x - .5 * w
					y = mouse.y - .5 * h
					pixel: #blue
					alpha:1.
				}
			}
		}
		Title{
			text = 'Interactivity'
		}
		Body{
			Codeview{
				x = 10
				y = 20
				// pull out the right node and eval it
				ast = code
			}
			Layer{
				x:800
				y:50
			}
		}
		eval(code.body, code)
	}

	Slide{
		Title{
			text = 'Making slides: a DSL'
		}
		Body{
			Codeview{
				ast:(){
					class Deck extends Scene{
						draw:(){
							this{}
							children[current].draw(this, parent)
							...
						}
						class Slide extends Layer{
							class Title extends Text{
								font_size = 40
							}
							class Body extends Layer{
								y = 100
								h:parent.h - y - 20
								class Bullet extends Text{
									font_size = 20
								}
							}
						}
					}

					Deck{
						Slide{
							Title{
								text = 'Slide Title'
							}
							Body{
								Bullet{
									text = 'Bullet 1'
								}
								Bullet{
									text = 'Bullet 2'
								}
							}
						}
						Slide{
							...
						}
					}
				}
			}
		}

	}

	Slide{
		Title{
			text = 'Today'
		}
		Body{
			Bullet{
				y = 20
				text = 'NOT ready for use'
			}

			Bullet{
				y = 120
				text = 'Multithreaded'
			}
			Bullet{
				y = 220
				text = '130k over the wire + fonts (100k ascii)'
			}
			Bullet{
				y = 320
				text = 'Slides 850ms startup, 450ms cached'
			}
			Bullet{
				y = 420
				text = 'iOS8 is great, android not so much'
			}

		}
	}

	Slide{
		Title{
			text = 'Future'
		}
		Body{
			Bullet{
				y = 20
				text = 'Constraints'
			}
			Codeview{
				x = 40
				y = 100
				ast:(){
					Layer{
						x > 10 && x < button.x
					}
				}
			}
			Bullet{
				y = 220
				text = 'Live coding'
			}
			Bullet{
				y = 320
				text = 'VR Support'
			}
			Bullet{
				y = 420
				text = 'Cloud9 UI complexity'
			}

		}
	}

	class Blur extends Layer{
		warp:(vec2 p){
			return vec2(
				p.x + 0.002*sin(10.*p.x+4.*time.sec),
				p.y + 0.002*cos(10.*p.y+4.*time.sec))
		}
		w:parent.w 
		h:parent.h
		buf = Texture.rgba_depth_flipped()
		pixel:	buf.flipped(vec2(p.x,p.y))
		skip_children = true
		pass:(sec){
			if(drawn) drawn = false
			else return
			buf{
				clearDepth()
				this{
					vertex:(mesh[]-.5)*2.
					pixel:.98*buf.sample(warp(pixel mesh[])) + .05mix(#black, #444, snoise3(14.p.x, 14.p.y,time.sec))
				}
				if(delay){
					drawChildren(this.parent, sec)
				}
				delay = true
			}
		}
	}

	Slide{
		Title{
			text = 'Winamp'
		}
		Body{
			Blur{
				Codeview{
					x:0
					y =-100
					ax: 10
					ay: 2
					sy: pow(8.+7.sin(.5time.sec),.5)
					sx: pow(8.+7.sin(.5time.sec),.5)
					font_size = 80
					u_outline = true
					ast:Layer{
						a+b*c/d-e=f[1]+i-j=k*l<m==n
						i-j=k*l<m==n-a+b*c/d-e=f[1]
						a+b*c/d-e=f[1]+i-j=k*l<m==n
						i-j=k*l<m==n-a+b*c/d-e=f[1]
						a+b*c/d-e=f[1]+i-j=k*l<m==n
						i-j=k*l<m==n-a+b*c/d-e=f[1]
						a+b*c/d-e=f[1]+i-j=k*l<m==n
						i-j=k*l<m==n-a+b*c/d-e=f[1]
						a+b*c/d-e=f[1]+i-j=k*l<m==n
						i-j=k*l<m==n-a+b*c/d-e=f[1]
					}
				}
			}
		}
	}
}
