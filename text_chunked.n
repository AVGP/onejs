// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
import text_marked
import glscene
// chunked text behaves like text
class ChunkedTextLayerImpl{
	// use layer matrices

	dontProxy('default_alloc', 'chunk_lines',
		'text_initialized','chunk_list','line_height',
		'cache_chunk','last_chunk','add_y','char_count')
	//dump = 1
	// load up the renderer
	load(MarkedTextLayerImpl)
	load(DebugLayerImpl)

	// this thing holds the data, but not the rendering
	class Chunk extends WorkerProxy{
		load(MarkedTextLayerImpl)
		dontProxy('total_count')
		y = 0
		constructor(parent){
			this.parent = parent
			MarkedTextLayerImpl::constructor(parent)
			if(!parent.chunk_list)parent.chunk_list = []
			parent.chunk_list.push(this)
		}
		$constructor:(){
			if(!parent.chunk_list)parent.chunk_list = []
			parent.chunk_list.push(this)
		}
		$flagDirty:(){
			parent.redraw()
		}
	}

	// todo make this windowed by scroll 
	drawSelf:(sec){
		// draw markers
		for(var chunk from chunk_list){
			marker_mesh = chunk.marker_mesh
			text_y = chunk.y
			this{
				pixel:marker_paint()
				vertex:marker_vertex
			}
		}
		// lets draw our text
		for(var chunk from chunk_list){
			mesh = chunk.mesh
			tag_mesh = chunk.tag_mesh
		 	text_y = chunk.y
			this{}
		}
		// lets draw our cursors
		for(var chunk from chunk_list){
			cursor_mesh = chunk.cursor_mesh
		 	text_y = chunk.y
			this{
				pixel:cursor_paint()
				vertex:cursor_vertex
			}
		}
		this{
			pixel:debug_pixel()
			vertex:debug_vertex
		}
	}

	default_alloc = 5000
	chunk_lines = 2

	get char_count(){
		return __char_count
	}

	set char_count(v){
		__char_count = v
	}

	constructor(){
		MarkedTextLayerImpl::constructor()
		DebugLayerImpl::constructor()
		// create a new last_chunk to start growing
		last_chunk = this.Chunk.new(this)
		last_chunk.chunk_id = 0
		last_chunk.allocText(default_alloc)
		last_chunk.total_count = 0
		__char_count = 0
		add_y = 0
		//last_chunk.style = style
	}

	offsetFromPos(x, y){
		// scan the chunks by y pos
		if(!cache_chunk) cache_chunk = last_chunk
		// we have to correct for y being at the font baseline.
		while(cache_chunk && y < cache_chunk.y){
			cache_chunk = chunk_list[cache_chunk.chunk_id -1]
		}
		if(!cache_chunk){
			return 0
		}
		while(cache_chunk && y >= cache_chunk.y + cache_chunk.text_h){
			//addDebug(100, cache_chunk.y + cache_chunk.text_h)
			//console.log(y, cache_chunk.y + cache_chunk.text_h)
			cache_chunk = chunk_list[cache_chunk.chunk_id + 1]
		}
		if(!cache_chunk){
			cache_chunk = chunk_list[chunk_list.length - 1]
			//console.log('here',  cache_chunk.char_count )
			return cache_chunk.total_count + cache_chunk.char_count
		}
		// lets find the closest character

		return cache_chunk.offsetFromPos(x, y - cache_chunk.y) + cache_chunk.total_count
	}

	cursorRect(off){
		var chunk = findChunk(off)
		var rect = chunk.cursorRect(off - chunk.total_count)		
		rect.y += chunk.y
		return rect
	}

	charBounds(off){
		var chunk = findChunk(off)
		var b = chunk.charBounds(off - chunk.total_count)
		// we need to find the actual baseline for this 

		b.y += chunk.y
		return b
	}

	// we expose the Text api onto subchunks
	charTag(off){
		// we have to find the right character tag
		var chunk = findChunk(off)
		return chunk.charTag_z(off - chunk.total_count)
	}

	findChunk(off){
		// otherwise we scan up or down from cache_chunk
		if(!cache_chunk) cache_chunk = last_chunk
		while(cache_chunk && off < cache_chunk.total_count){
			cache_chunk = chunk_list[cache_chunk.chunk_id -1]
		}
		while(cache_chunk && off >= cache_chunk.total_count + cache_chunk.char_count){
			cache_chunk = chunk_list[cache_chunk.chunk_id + 1]
		}
		if(!cache_chunk) cache_chunk = last_chunk
		return cache_chunk
	}

	charTag_z(off){
		var chunk = findChunk(off)
		return chunk.charTag_z(off - chunk.total_count)
	}

	reserialize(){
		var str
		for(var chunk from chunk_list){
			str += chunk.reserialize()
		}
		return str
	}

	charBaseline(off){
		var chunk = findChunk(off)
		return chunk.charBaseline(off - chunk.total_count) + chunk.y
	}
	
	reallocText(extra){
		//last_chunk.reallocText(extra)
	}

	allocText(length){
		//last_chunk.allocText(length)
	}

	tagChar(off, length, x, y, z){
		last_chunk.tagChar(off, length, x, y, z)
	}

	newline(t){
		char_count += last_chunk.newline(t)
		if(last_chunk.lines > chunk_lines){
			var new_chunk = this.Chunk.new(this)
			// complete last_chunk
			add_y += last_chunk.text_h
			new_chunk.total_count = last_chunk.char_count + last_chunk.total_count
			new_chunk.chunk_id = chunk_list.length - 1
			new_chunk.y = add_y 
			//new_chunk.start_y = 0
			last_chunk = new_chunk
			last_chunk.allocText(default_alloc)
		}
	}

	tab(t){
		char_count += last_chunk.tab(t)
	}

	space(t){
		char_count += last_chunk.space(t)
	}

	string(text, x, y){
		// lets add text to our last last_chunk
		last_chunk.tag_x = tag_x
		last_chunk.tag_y = tag_y
		char_count += last_chunk.string(text, x, y)
	}

	// ok lets first do a clear all, start from scratch kinda thing.
	addMarkers(start, end, data){
		if(end < start){
			var t = end
			end = start
			start = t
		}
		var chunks = []
		var array = []
		// first we are going to build the marker extents array
		for(var cs = findChunk(start); cs && cs.total_count < end; cs = chunk_list[cs.chunk_id+1]){
			// now lets mark it from the right start t oend
			var array_start = array.length
			cs.getMarkers(max(start, cs.total_count) - cs.total_count, 
				end - cs.total_count, array)
			chunks.push(cs, array_start, array.length)
		}
		// then we write all the markers into the chunks
		for(var i = 0; i < chunks.length; i += 3){
			var chunk = chunks[i]
			var jstart = chunks[i+1]
			var jend = chunks[i+2]
			for(var j = jstart; j < jend; j++){
				chunk.addMarker(array[j-1], array[j], array[j+1], data)
			}
			chunk.marked = true
		}
	}

	clearMarkers(){
		for(var chunk from chunk_list){
			chunk.clearMarkers()
		}
	}

	clearCursors(){
		for(var chunk from chunk_list){
			chunk.clearCursors()
		}
	}

	addCursor(pos){
		var chunk = findChunk(pos)
		chunk.addCursor(pos - chunk.total_count)
	}
}