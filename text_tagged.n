// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
import text

// text with extra tag struct
class TaggedTextImpl extends TextImpl{

	dontProxy('tag_x','tag_y')
	
	constructor(parent){
		tag_mesh = vec4[]()
		TextImpl::constructor(parent)
	}

	tag_x = 0
	tag_y = 0

	charTag(off){
		return vec4[] tag_mesh.quad[off]
	}
	
	charTag_z(off){
		return vec4[] tag_mesh.quad[off].z
	}

	reserialize(){
		var s = ''
		vec4[] buf = tag_mesh
		for(var i = 0, l = buf.quad.length; i<l; i++){
			s += String.fromCharCode(buf.quad[i].z)
		}
		return s
	}
	
	// turn a baseline into a an approximate top
	baseToTop(y){
		return y + font_size * cursor_sink - line_height 
	}

	// fetch the baseline of a character by offset
	charBaseline(off){
		// scan backwards to newline and add a line.
		// if 0 return 0
		var o = off
		vec4[] tags = tag_mesh
		vec4[] mesh = mesh
		while(o >= 0){
			if(tags.quad[o].z == 10){
				var base = mesh.quad_tl[o].y
				if(off != o) base += line_height
				return base
			} // newline
			o--
		}
		return start_y === null? line_height: 0
	}

	// return the cursor rectangle based on an offset
	cursorRect(off){
		var bounds = charBounds(off)
		var base = charBaseline(off)
		var height = line_height//font_size * cursor_spacing

		base += font_size * cursor_sink
		return {
			x:bounds.x
			y:base - height
			w:bounds.w
			h:height
		}
	}

	// calculate the cursor offset from mouse position
	offsetFromPos(x, y){
		vec4[] tags = tag_mesh
		vec4[] mesh = mesh
		var height = line_height
		for(var o = tags.quad.length - 1; o >= 0; o--){
			if(o == tags.quad.length - 1 || o == 0 || tags.quad[o].z == 10){
				var h1 = charBaseline(o) - height + font_size * cursor_sink
				var h2
				// lets fetch the next line, so we never have rounding errors
				if(tags.quad[o].z == 10) h2 = charBaseline(o+1) - height + font_size * cursor_sink
				else h2 = h1 + height
				// what we need is to 
				if(y < h2 && y >= h1){
					while(o >= 0){
						var hx = (mesh.quad_tl[o].x + mesh.quad_tr[o].x)/2
						if(tags.quad[o-1].z == 10 && x< mesh.quad_tl[o].x){
							return o 
						}
						if(x >= mesh.quad_tl[o].x && x < hx){
							return o
						}
						if(x > hx){
							if(tags.quad[o].z == 10) return o
							return o + 1
						}
						o --
					}
					return 0
				}
			}
		}
		return -1
	}
	tag_pos: vec2(floor(mod(abs(tag_mesh[].w),256.)), floor(abs(tag_mesh[].w)/256.))
	
	tagChar(length, x, y, z){
		vec4[] tags = tag_mesh
		for(var i = 0; i < length; i++){
			var o = tags.quad.length++
			tags.quad[o] = vec3(x,y,z)
			tags.quad_tl[o].w = 0.1
			tags.quad_tr[o].w = 1
			tags.quad_bl[o].w = 256
			tags.quad_br[o].w = 257
		}
	}

	allocText(length){
		TextImpl::allocText(length)
		vec4[] tag_mesh.quad.length = length
		tag_mesh.length = 0
	}

	/*
	insertText(offset, length){
		var from = alloc_off
		var to = alloc_off + length * 6
		for(var i = start64;i>=offset;i-=6){
			var i1 = i+length
			mesh[i1].x = mesh[i].x
			mesh[i1].y = mesh[i].y
			mesh[i1].z = mesh[i].z
			mesh[i1].w = mesh[i].w
		}
	}*/

	newline(t = 1){
		var i = TextImpl::newline(t)
		tagChar(i, tag_x, tag_y, 10)
		return i
	}

	tab(t = 1){
		var i = TextImpl::tab(t)
		tagChar(i, tag_x, tag_y, 9)
		return i
	}

	space(t = 1){
		var i = TextImpl::space(t)
		tagChar(i, tag_x, tag_y, 32)
		return i
	}

	string(text, x, y){
		if(x !== undefined) add_x = x 
		if(y !== undefined) add_y = y 
		var length = text.length
		var chars = 0
		// alright lets convert some text babeh!
		for(var i = 0; i < length; i++){
			var unicode = text.charCodeAt(i)

			// parse inline tags
			if(inline_tags && (unicode == 36||unicode==37)){
				var t = i
				var next
				while((next = text.charCodeAt(t+1)) >= 48 && next <=57){
					t++
				}
				if(i != t){
					var out = parseInt(text.slice(i+1, i-t))
					if(unicode == 36) tag_x = out
					else tag_y = out
					i = t
					continue
				}
			}
			if(unicode == 32){
				chars += space()
				continue
			}
			if(unicode == 10){ // newline
				chars += newline()
				continue
			}
			if(unicode == 9){ // tab
				chars += tab()
			}
			var glyph = glyphy_info.glyphs[unicode]
			if(!glyph){
				chars += space()
				continue
			}
			// lets add some vertices
			addChar(glyph)
			chars++
			tagChar(1, tag_x, tag_y, unicode)
		}
		if(add_y > text_h) text_h = add_y	
		return chars
	}
}
