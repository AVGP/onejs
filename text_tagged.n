// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
import text

// text with extra tag struct
class TaggedTextImpl extends TextImpl{

	dontProxy('tag_x','tag_y')
	
	constructor(parent){
		tag_mesh = vec4[]()
		TextImpl::constructor(parent)
	}

	tag_x = 0
	tag_y = 0

	charTag(off){
		return vec4[] tag_mesh.quad[off]
	}
	
	charTag_z(off){
		return vec4[] tag_mesh.quad[off].z
	}

	serialize(start, end){
		var s = ''
		vec4[] buf = tag_mesh
		for(var i = start?start:0, l = end?end:buf.quad.length; i<l; i++){
			s += String.fromCharCode(buf.quad[i].z)
		}
		return s
	}
	
	serializeArray(start, end){
		var s = []
		vec4[] buf = tag_mesh
		for(var i = start?start:0, l = end?end:buf.quad.length; i<l; i++){
			s.push(buf.quad[i].z)
		}
		return s
	}

	serializeTags(start, end){
		var s = []
		vec4[] buf = tag_mesh
		for(var i = start?start:0, l = end?end:buf.quad.length; i<l; i++){
			s.push(buf.quad[i].x, buf.quad[i].y)
		}
		return s
	}

	// turn a baseline into a an approximate top
	baseToTop(y){
		return y + font_size * cursor_sink - line_height 
	}

	baseToBottom(y){
		return y + font_size * cursor_sink
	}


	// fetch the baseline of a character by offset
	charBaseline(off){
		var o = off
		vec4[] tags = tag_mesh
		vec4[] mesh = mesh
		if(o >= char_count) o = char_count - 1
		var info = glyphy_info.glyphs[tags.quad[o].z]
		if(!info){
			console.log(this, serialize())
		}

		var base = mesh.quad_tl[o].y + font_size * info.min_y
		return base
	}
	// fetch the baseline of a character by offset
	charBasecol(off){
		var o = off
		vec4[] tags = tag_mesh
		vec4[] mesh = mesh
		if(o >= char_count) o = char_count - 1
		var info = glyphy_info.glyphs[tags.quad[o].z]
		var base = mesh.quad_tl[o].x - font_size * info.min_x
		return base
	}

	// return the cursor rectangle based on an offset
	cursorRect(off){
		var bounds = charBounds(off)
		var base = charBaseline(off)
		var height = line_height//font_size * cursor_spacing

		base += font_size * cursor_sink
		return {
			x:bounds.x
			y:base - height
			w:bounds.w
			h:height
		}
	}

	// calculate the cursor offset from mouse position
	// -1 to the left of self
	// -2 to the top of self
	// -3 to the right of self
	// -4 below self
	offsetFromPos(x, y){
		vec4[] tags = tag_mesh
		vec4[] mesh = mesh
		var height = line_height
		// out codes
		// lets check if our y < 0 || y > text_h
		//parent.addDebug(100, 0+ this.y)
		//parent.addDebug(100, text_h + font_size * cursor_sink + this.y)
		//parent.addDebug(100, block_y + line_height + this.y)
		if(y < 0) return -2
		if(y > text_h + font_size * cursor_sink) return -3
		// alright. lets scan em 
		for(var o = tags.quad.length - 1; o >= 0; o--){
			var info = glyphy_info.glyphs[tags.quad[o].z]
			var y2 = mesh.quad_tl[o].y + font_size * info.min_y + font_size * cursor_sink
			var y1 = y2 - line_height
			if(y>=y1 && y<=y2){
				var hx = (mesh.quad_tl[o].x + mesh.quad_tr[o].x)/2
				if(tags.quad[o-1].z == 10 && x< mesh.quad_tl[o].x){
					return o 
				}
				if(x >= mesh.quad_tl[o].x && x < hx){
					return o
				}
				// how shall we do this.
				if(o == 0 && x < mesh.quad_tl[o].x){
					return -1 // to the left
				}
				if(o == tags.quad.length - 1 && x > mesh.quad_tr[o].x){
					return -4
				}
				if(x > hx){
					if(tags.quad[o].z == 10) return o
					return o + 1
				}
			}
		}
		return -4 // to the right of self
	}
	tag_pos: vec2(floor(mod(abs(tag_mesh[].w),256.)), floor(abs(tag_mesh[].w)/256.))
	
	tagChar(length, x, y, z){
		vec4[] tags = tag_mesh
		for(var i = 0; i < length; i++){
			var o = tags.quad.length++
			tags.quad[o] = vec3(x,y,z)
			tags.quad_tl[o].w = 0.1
			tags.quad_tr[o].w = 1
			tags.quad_bl[o].w = 256
			tags.quad_br[o].w = 257
		}
	}

	allocText(length){
		TextImpl::allocText(length)
		vec4[] tag_mesh.quad.length = length
		tag_mesh.length = 0
	}

	/*
	insertText(offset, length){
		var from = alloc_off
		var to = alloc_off + length * 6
		for(var i = start64;i>=offset;i-=6){
			var i1 = i+length
			mesh[i1].x = mesh[i].x
			mesh[i1].y = mesh[i].y
			mesh[i1].z = mesh[i].z
			mesh[i1].w = mesh[i].w
		}
	}*/

	newline(t = 1){
		var i = TextImpl::newline(t)
		tagChar(i, tag_x, tag_y, 10)
		return i
	}

	tab(t = 1){
		var i = TextImpl::tab(t)
		tagChar(i, tag_x, tag_y, 9)
		return i
	}

	space(t = 1){
		var i = TextImpl::space(t)
		tagChar(i, tag_x, tag_y, 32)
		return i
	}

	string(text, tags){
		var length = text.length
		var chars = 0
		// alright lets convert some text babeh!
		var isarray = Array.isArray(text)
		for(var i = 0; i < length; i++){
			var unicode = isarray?text[i]:text.charCodeAt(i)

			// parse inline tags
			if(inline_tags && (unicode == 36||unicode==37)){
				var t = i
				var next
				while((next = text.charCodeAt(t+1)) >= 48 && next <=57){
					t++
				}
				if(i != t){
					var out = parseInt(text.slice(i+1, i-t))
					if(unicode == 36) tag_x = out
					else tag_y = out
					i = t
					continue
				}
			}
			if(unicode == 32){
				chars += space()
				continue
			}
			if(unicode == 10){ // newline
				chars += newline()
				continue
			}
			if(unicode == 9){ // tab
				chars += tab()
				continue
			}
			var glyph = glyphy_info.glyphs[unicode]
			if(!glyph){
				chars += space()
				continue
			}
			// lets add some vertices
			addChar(glyph)
			chars++
			if(tags) tagChar(1, tags[i*2], tags[i*2+1], unicode)
			else tagChar(1, tag_x, tag_y, unicode)
		}
		if(add_y > text_h) text_h = add_y	
		return chars
	}

	removeText(start, end, addx, addy){
		if(!char_count) debugger
		vec4[] tags = tag_mesh
		vec4[] mesh = mesh

		var old_len = mesh.quad.length
		var old_add_y = add_y
		var old_add_x = add_x
		add_x = addx!==undefined?addx:charBasecol(start)
		add_y = addy!==undefined?addy:charBaseline(start)

		// assume a length lowering never deletes the array
		tags.quad.length = start
		mesh.quad.length = start
		if(end < old_len){
			for(var i = end; i<old_len; i++){
				var new_i = start + i - end
				var unicode = tags.quad[i].z
				var info = glyphy_info.glyphs[unicode]
				tags.quad[new_i] = tags.quad[i]
				tags.quad.length++
				if(unicode<0){ // special folds/inline tags
				}
				else if(unicode == 32) TextImpl::space()
				else if(unicode == 10){
					TextImpl::newline()
					if(end == 0){
						tags.quad.length = old_len
						mesh.quad.length = old_len
						add_y = old_add_y
						add_x = old_add_x
						break
					}
				}
				else if(unicode == 9) TextImpl::tab()
				else{
					addChar(info)
				}
			}
		}
	}

	insertText(index, text){
		// lets insert some text!
		add_x = addx!==undefined?addx:charBasecol(start)
		add_y = addy!==undefined?addy:charBaseline(start)

		// lets resize

	}

	truncateText(start){
		add_x = charBasecol(start)
		add_y = charBaseline(start)
		vec4[] tag_mesh.quad.length = start
		vec4[] mesh.quad.length = start
	}
}
