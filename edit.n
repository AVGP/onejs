import math
import glscene
import diff
import text_chunked
import distfield2d

class EditImpl{

	// single cursor
	class Cursor{
		constructor(cursors){
			this.cursors = cursors
			start = 0
			end = 0
			max = 0
		}
		
		get lo(){
			return end>start?start:end
		}
		get hi(){
			return end>start?end:start
		}
		get span(){
			return abs(end-start)
		}

		hideProperties()

		moveLeft(only_end){
			end = end - 1
			if(end<0) end = 0
			if(!only_end) start = end
			max = cursors.text_layer.cursorRect(end).x
		}

		moveRight(only_end){
			end = end + 1
			if(end > cursors.text_layer.char_count) end = cursors.text_layer.char_count
			if(!only_end) start = end
			max = cursors.text_layer.cursorRect(end).x
		}

		moveUp(only_end, lines = 1){
			var rect = cursors.text_layer.cursorRect(end)
			end = cursors.text_layer.offsetFromPos(max, rect.y + .5*rect.h - lines * cursors.text_layer.line_height)
			if(!only_end) start = end
		}

		moveDown(only_end, lines = 1){
			var rect = cursors.text_layer.cursorRect(end)
			end = cursors.text_layer.offsetFromPos(max, rect.y + .5*rect.h + lines * cursors.text_layer.line_height)
			if(!only_end) start = end
		}

		moveTo(x, y, only_end){
			var off = cursors.text_layer.offsetFromPos(x, y)
			var change = end != off 
			end = off
			if(!only_end) change = start != end || change, start = end
			var r = cursors.text_layer.cursorRect(off)
			max = r.x
		}

		backspace(){
			start += cursors.delta
			end += cursors.delta
			if(start == end){
				if(lo == 0) return
				cursors.text_layer.removeText(lo - 1, hi)
				start = end = lo - 1
				cursors.delta -= 1
			}
			else {
				cursors.text_layer.removeText(lo, hi)
				cursors.delta -= span
				start = end = lo
			}
			max = cursors.text_layer.cursorRect(end).x
			// lets update all cursors after us with - delta
		}

		insert(text){
			var cdelta = 0
			if(cursors.text_layer.processInsert){
				[text, cdelta] = cursors.text_layer.processInsert(lo, hi, text)
			}
			start += cursors.delta
			end += cursors.delta
			if(start != end){
				cursors.text_layer.removeText(lo, hi)
				cursors.delta -= span
			}
			if(text.length){
				cursors.text_layer.insertText(lo, text)
				cursors.delta += text.length
			}	
			start = end = lo + text.length + cdelta
			max = cursors.text_layer.cursorRect(end).x
		}

		isSelection(){
			return start !== end
		}

		isCursor(){
			return start === end
		}
	}

	// cursor set 
	class Cursors{
		constructor(text_layer){
			this.text_layer = text_layer
			list = [Cursor.new(this, 0)]
			fusing = true
		}

		fuse(){

			list.sort(function(a,b){ return (a.start<a.end?a.start:a.end) < (b.start<b.end?b.start:b.end)? -1: 1})
			// lets do single pass
			for(var i = 0; i<list.length-1;){
				var cur = list[i]
				var nxt = list[i+1]
				// lets figure out the different overlap cases
				if(cur.hi >= nxt.lo){
					if(cur.hi <= nxt.hi){ // we fuse it [cur<]nxt>
						if(nxt.end < nxt.start){
							cur.end = cur.lo
							cur.start = nxt.hi
						}
						else{
							cur.start = cur.lo
							cur.end = nxt.hi
						}
					}
					// remove the nxt
					list.splice(i+1, 1)
				}
				else i++
			}
		}

		update(){
			if(pending) return
			pending = 1
			setImmediate() do()=>{
				pending = 0
				text_layer.clearMarkers()
				text_layer.clearCursors()

				// fuse the cursor list
				if(fusing) fuse()
				// draw it into geometry buffers 
				for(var cursor from list){
					if(cursor.start != cursor.end){
						text_layer.addMarkers(cursor.start, cursor.end)
					}
					text_layer.addCursor(cursor.end)
				}
			}
		}

		rectSelect(x1, y1, x2, y2, clone){
			if(y2<y1){
				var t = y1
				y1 = y2
				y2 = t
			}
			var new_list = Array.prototype.slice.apply(clone)
			var height = text_layer.line_height
			var y = y1
			while(1){
				var cur = Cursor.new(this,0)
				new_list.push(cur)
				cur.start = text_layer.offsetFromPos(x1,y)
				cur.end = text_layer.offsetFromPos(x2,y)
				//console.log(cur.end, x2)
				if(y >= y2) break
				y += height
				if(y > y2) y = y2
			}
			list = new_list
			update()
		}

		add(){
			var cursor = Cursor.new(this,list.length)
			list.push(cursor)
			return cursor
		}
		// forwards the whole api
		for(var key in Cursor) bind(key){
			if(typeof Cursor[key] == 'function'){
				this[key] = (){
					this.delta = 0
					for(var cursor from list) cursor[key](...)
					this.update()
				}
			}
		}
	}

	constructor(){
		cursors = Cursors.new(text_layer || this)

		key.press(v)=>{
			// lets do the inserts.
			// we have to replace our cursor set start->end with something
			cursors.insert(v.value)
		}

		key.down(v)=>{
			var name = 'key' + v.name[0].toUpperCase() + v.name.slice(1)
			if(this[name]) this[name](v)
		}

		mouse.leftdown(v)=>{
			// rectangular selection
			if(key.alt){
				
				var startx = mouse.x
				var starty = mouse.y
				var clone
				if(key.leftmeta || key.rightmeta) clone = cursors.list
				else clone = []

				cursors.rectSelect(startx, starty, startx, starty, clone)
				cursors.fusing = false
				mouse.capture(=>{
					cursors.rectSelect(startx, starty, mouse.x, mouse.y, clone)
				},=>{
					cursors.fusing = true
					cursors.update()
				})
			}
			else
			// add a cursor
			if(key.leftmeta || key.rightmeta){
				var cursor = cursors.add()
				// in that case what we need to 
				cursors.fusing = false
				cursor.moveTo(mouse.x, mouse.y)
				cursors.update()
				mouse.capture(=>{
					// move
					cursor.moveTo(mouse.x, mouse.y, true)
					cursors.update()
				},=>{
					cursors.fusing = true
					cursors.update()
				})
			}
			// normal selection
			else{
				// in that case what we need to 
				cursors.fusing = true
				cursors.moveTo(mouse.x, mouse.y)
				mouse.capture(=>{
					cursors.moveTo(mouse.x, mouse.y, true)
				})
			}
		}
		cursors.moveDown(1,0)
		//cursors.moveDown(1, 100)
	}
	
	keyBackspace(){
		cursors.backspace()
	}

	keyLeftarrow(){
		cursors.moveLeft(key.shift)
	}

	keyRightarrow(){
		cursors.moveRight(key.shift)
	}

	keyUparrow(){
		cursors.moveUp(key.shift)
	}

	keyDownarrow(){
		cursors.moveDown(key.shift)
	}
}

class Edit extends Text{
	load(EditImpl)
	constructor(){
		Text::constructor()
		EditImpl::constructor()
	}
}