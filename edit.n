import math
import glscene
import diff
import chunked

class EditImpl{

	// single cursor
	class Cursor extends Layer{
		constructor(text_layer){
			parent = this.text_layer = text_layer
			Layer::constructor()
			_start = 0
			_end = 0
			_max = 0
			// denormalized positions
			ax = 0
			ay = 0
			w = 1
			x = 0
			pixel:#white
		}

		hideProperties()

		update(){
			// lets find our _start and _end coordinates
			var b = text_layer.charBounds(_start)
			x = floor(b.x)
			y = floor(b.y - text_layer.font_size)
			h = text_layer.font_size
		}

		moveLeft(){
			_start = _end = _start - 1
			update()
			_max = x
		}

		moveRight(){
			_start = _end = _start + 1
			update()
			_max = x
		}

		moveUp(lines){
			lines ?= 1
			var i = _end
			while(lines>0){
				if(text_layer.charMark_z(i) == 10) i--
				while(i>0){
					if( text_layer.charMark_z(i) == 10) break
					i--
				}
				var first = i
				while(i>0){
					if(i != first && text_layer.charMark_z(i) == 10) break
					if(text_layer.charBounds(i-1).x < _max || text_layer.charBounds(i).x <= _max){
						break
					}
					i--
				}
				lines--
			}
			//console.log(text_layer.alloc_off * 4 * 4 * 2)
			_start = _end = i
			update()
		}

		moveDown(lines){
			lines ?= 1
			// alright so, now we have chars in our array. yay.
			var i = _end
			while(lines>0){
				while(i<text_layer.char_length){
					if(text_layer.charMark_z(i) == 10)break
					i++
				}
				i++
				// alright so now we scan until we hit _max or newline
				while(i<text_layer.char_length){
					if(text_layer.charMark_z(i) == 10 || 
						text_layer.charBounds(i).x >= _max) break
					i++
				}
				lines--
			}
			_start = _end = i
			update()
		}

		isSelection(){
			return _start !== _end
		}

		isCursor(){
			return _start === _end
		}
	}

	// cursor set 
	class Cursors{
		constructor(text_layer){
			list = [Cursor.new(text_layer)]
		}

		for(var key in Cursor) bind(key){
			if(typeof Cursor[key] == 'function'){
				this[key] = (){
					for(var cursor from list) cursor[key](...)
				}
			}
		}
	}

	constructor(){
		cursors = Cursors.new(text_layer || this)

		key.press(v)=>{
			out(v)
		}

		key.down(v)=>{
			var name = 'key' + v.name[0].toUpperCase() + v.name.slice(1)
			if(this[name]) this[name](v)
		}
	}

	keyLeftarrow(){
		cursors.moveLeft()
	}

	keyRightarrow(){
		cursors.moveRight()
	}

	keyUparrow(){
		cursors.moveUp()
	}

	keyDownarrow(){
		cursors.moveDown()
	}
}

class Edit extends Text{
	load(EditImpl)
	constructor(){
		Text::constructor()
		EditImpl::constructor()
	}
}