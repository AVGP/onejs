import math
import glscene
import diff
import chunked

class EditImpl{

	// single cursor
	class Cursor extends Layer{

		constructor(text_layer){
			parent = this.text_layer = text_layer
			Layer::constructor()
			dontProxy('start','end','max')
			start = 0
			end = 0
			max = 0
			// denormalized positions
			ax = 0
			ay = 0
			w = 1
			x = 0
			pixel:#white
		}

		hideProperties()

		update(){
			// figure out where the cursor is going
			var rect = text_layer.cursorRect(end)
			x = rect.x
			y = rect.y
			h = rect.h
			// we have to generate some marker rects

			text_layer.clearMarkers()
			if(start != end){
				text_layer.addMarkers(start, end)
			}
			text_layer.updateText()
		}

		moveLeft(only_end){
			end = end - 1
			if(!only_end) start = end
			update()
			max = x
		}

		moveRight(only_end){
			end = end + 1
			if(!only_end) start = end
			update()
			max = x
		}

		moveUp(only_end, lines = 1){
			var rect = text_layer.cursorRect(end)
			end = text_layer.offsetFromPos(max, rect.y + .5*rect.h - lines * text_layer.line_height)
			if(!only_end) start = end
			update()
		}

		moveDown(only_end, lines = 1){
			var rect = text_layer.cursorRect(end)
			end = text_layer.offsetFromPos(max, rect.y + .5*rect.h + lines * text_layer.line_height)
			if(!only_end) start = end
			update()
		}

		moveTo(x, y, only_end){
			var off = text_layer.offsetFromPos(x, y)
			var change = end != off 
			end = off
			if(!only_end) change = start != end || change, start = end
			var r = text_layer.cursorRect(off)
			max = r.x
			if(change) update()
		}

		isSelection(){
			return start !== end
		}

		isCursor(){
			return start === end
		}
	}

	// cursor set 
	class Cursors{
		constructor(text_layer){
			list = [Cursor.new(text_layer)]
		}

		for(var key in Cursor) bind(key){
			if(typeof Cursor[key] == 'function'){
				this[key] = (){
					for(var cursor from list) cursor[key](...)
				}
			}
		}
	}

	constructor(){
		cursors = Cursors.new(text_layer || this)

		key.press(v)=>{
			out(v)
		}

		key.down(v)=>{
			var name = 'key' + v.name[0].toUpperCase() + v.name.slice(1)
			if(this[name]) this[name](v)
		}

		mouse.leftdown(v)=>{
			// set cursor start
			cursors.moveTo(mouse.x, mouse.y)
			mouse.capture() do =>{
				// move
				cursors.moveTo(mouse.x, mouse.y, true)

			}
		}
	}

	keyLeftarrow(){
		cursors.moveLeft(key.shift)
	}

	keyRightarrow(){
		cursors.moveRight(key.shift)
	}

	keyUparrow(){
		cursors.moveUp(key.shift)
	}

	keyDownarrow(){
		cursors.moveDown(key.shift)
	}
}

class Edit extends Text{
	load(EditImpl)
	constructor(){
		Text::constructor()
		EditImpl::constructor()
	}
}