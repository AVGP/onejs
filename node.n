//  NodeJS API Classes
//  Copyright (C) 2014 ONEJS 

load('timer')

var _fs = require('fs')
var _http = require('http')
var _url = require('url')

Mime::{

	htm  = "text/html"
	html = "text/html"
	js   = "application/javascript"
	jpg  = "image/jpeg"
	jpeg = "image/jpeg"
	txt  = "text/plain"
	css  = "text/css"
	ico  =  "image/x-icon"
	png  = "image/png"
	gif  = "image/gif"

	regex = new RegExp("\\.(" + keys().join("|") + ")$")

	fromFilename( name ){
		var ext = name.match(regex)
		return ext && this[ ext[1] ] || "text/plain"
	}
}

HttpServer::{

	routes = []

	// make a new server and listen
	init( port, addr ){
		server = http.createServer()
		server.listen( port, addr ) do( req, res ){

			var url = _url.parse(req.url)
			var path = url.pathname

			for(var [match, body] of routes){
				break if typeof match == 'string' and match == path
				break if path.match(n)
			}
			if(!body){
				res.writeHead(404)
				res.end("no route found")
				return
			}
			body(req, res)
		}
	}

	route( match, body ) ->routes.push( [match, body] )
}

Http::{
	get( .url ) ->promise{
		url = _url.parse( url )
		var data = []

		var req = _http.request({
			hostname: url.hostname, 
			port: url.port || 80,
			method: 'GET', 
			path: url.path} ) 

		do( res, err ){
			if(res.statusCode != 200) reject(res)
			res.setEncoding('utf8')
			res.on('data') do chunk -> data.push(chunk)
			res.on('end') do -> resolve(data.join(''))
		}

		req.end()
	}
}