//  NodeJS API Classes
//  Copyright (C) 2014 ONEJS 
var _fs = require('fs')
var _http = require('http')
var _url = require('url')
var _zlib = require('zlib')

Path = require('path')

function signalify( api ){
	for(var k in api) bind(k){
		if(k.indexOf('Sync')!=-1){
			this[k] = api[k]
			return
		}
		if(k in this) return

		this[k] = ( ...args )		 ->Signal.wrap do(sig){
			api[k](...args) do(err, data){
				if(err) return sig.throw(err)
				sig.end(data)
			}
		}
	}
}

class mime{

	htm  = "text/html"
	html = "text/html"
	js   = "application/javascript"
	jpg  = "image/jpeg"
	jpeg = "image/jpeg"
	txt  = "text/plain"
	css  = "text/css"
	ico  =  "image/x-icon"
	png  = "image/png"
	gif  = "image/gif"

	regex = new RegExp("\\.(" + keys().join("|") + ")$")

	fromFilename( name ){
		var ext = name.match(regex)
		return ext && this[ ext[1] ] || "text/plain"
	}
}

class fs{
	signalify(_fs)
	readString(path) -> readFile(path).map do v->v.toString()
}

class zlib{
	signalify(_zlib)
}

class HttpServer{

	routes = []

	init( port, addr ){

		server = _http.createServer() do( req, res ){
			console.log(req.headers.host)
			var url = _url.parse(req.url)
			var path = url.pathname
			for(var [match, body] of routes){
				if(typeof match == 'string' and match == path) break 
				else if(path.match(match)) break
			}
			if(!body){
				res.writeHead(404)
				res.end("no route found")
				return
			}
			req.url = url
			body(req, res)
		}
		server.listen(port, addr) 
	}

	route( match, body ) -> routes.push( [match, body] )
}

class HttpClient{
	get( @url ) -> Signal.wrap do(sig){
		url = _url.parse( url )
		var data = []

		var req = _http.request({
			hostname: url.hostname, 
			port: url.port || 80,
			method: 'GET', 
			path: url.path} ) 

		do( res, err ){
			if(res.statusCode != 200) sig.throw(res)
			res.setEncoding('utf8')
			res.on('data') do chunk => data.push(chunk)
			res.on('end') do => sig.end(data.join(''))
		}

		req.end()
	}
}