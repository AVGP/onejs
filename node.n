//  NodeJS API Classes
//  Copyright (C) 2014 ONEJS 

extends Base

var _fs = require('fs')
var _http = require('http')
var _url = require('url')

Path = require('path')

function promisify( api ){
	for(var k in api) bind(k){
		if(k.indexOf('Sync')!=-1){
			this[k] = api[k]
			return
		}
		if(k in this) return

		this[k] = ( ...args ) ~> promise{
			args.push then( err, data ){
				if(err) return reject( err )
				resolve( data )
			}
			api[k](...args)
		}
	}
}

mime = Base{

	htm  = "text/html"
	html = "text/html"
	js   = "application/javascript"
	jpg  = "image/jpeg"
	jpeg = "image/jpeg"
	txt  = "text/plain"
	css  = "text/css"
	ico  =  "image/x-icon"
	png  = "image/png"
	gif  = "image/gif"

	regex = new RegExp("\\.(" + keys().join("|") + ")$")

	fromFilename( name ){
		var ext = name.match(regex)
		return ext && this[ ext[1] ] || "text/plain"
	}
}

fs = Base{
	promisify(_fs)
}

class HttpServer{

	routes = []

	constructor( port, addr ){

		server = _http.createServer() do( req, res ){
			var url = _url.parse(req.url)
			var path = url.pathname
			for(var [match, body] of routes){
				if typeof match == 'string' and match == path then break 
				else if path.match(match) then break
			}
			if(!body){
				res.writeHead(404)
				res.end("no route found")
				return
			}
			req.url = url
			body(req, res)
		}
		server.listen( port, addr ) 
	}

	route( match, body ) ~> routes.push( [match, body] )
}

class HttpServer{
	get( @url ) ~> promise{
		url = _url.parse( url )
		var data = []

		var req = _http.request({
			hostname: url.hostname, 
			port: url.port || 80,
			method: 'GET', 
			path: url.path} ) 

		then( res, err ){
			if(res.statusCode != 200) reject(res)
			res.setEncoding('utf8')
			res.on('data') then chunk => data.push(chunk)
			res.on('end') then => resolve(data.join(''))
		}

		req.end()
	}
}