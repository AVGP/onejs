//  NodeJS API Classes
//  Copyright (C) 2014 ONEJS 

load('timer')

var _fs = require('fs')
var _http = require('http')
var _url = require('url')

Mime::{

	htm  = "text/html"
	html = "text/html"
	js   = "application/javascript"
	jpg  = "image/jpeg"
	jpeg = "image/jpeg"
	txt  = "text/plain"
	css  = "text/css"
	ico  =  "image/x-icon"
	png  = "image/png"
	gif  = "image/gif"

	regex = new RegExp("\\.(" + Object.keys(this).join("|") + ")$")

	fromFilename( name ){
		var ext = name.match(mimeRx)
		return ext && this[ext[1]] || "text/plain"
	}
}

// all file, path tools
File::{
	stream(path){
	}

	open(path){
	}

	exists(name){
	}

	watch(name, options){
	}
}

// url class
Url::{
	maker(url){
		var o = _url.parse(url)
		for(var k in o) this[k] = o[k]
	}
}

Http::{
	get(myurl) -> promise{
		url = ../Url.new(myurl)
		var data = []
		var req = _http.request({
			hostname:url.hostname, 
			port:url.port || 80,
			method:'GET', 
			path:url.path} ) 

		do (res, err){
			if(res.statusCode != 200) reject(res)
			res.setEncoding('utf8')
			res.on('data') do chunk -> data.push(chunk)
			res.on('end') do -> resolve(data.join(''))
		}

		req.end()
	}
}

HttpServer::Http{
	
	maker(){
	}
	
	route( match, body ){
	}

	Response::{
		_maker(handle){
			req = maker.request
		}

		text( code, text ){
			writeHead(code, {"Content-Type":"text/plain"})
			end(text)
		}
		// url object
	}
}

WatchFile::{

	watching = {}

	maker(filename, options,  cb){
		var stat = fs.statSync( filename )
	}

	watching[ filename ] = ../Interval.new(50) do->{
		var stat = fs.statSync(filename)
		var diff = 0
		if(stat[watch].toString() != stats[filename]){ 
			stats[filename] = stat[watch].toString()
			
		}
	}
}