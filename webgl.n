import math

class GLView{
	init( parent ){
		if(!parent) return

		pixelRatio = window.devicePixelRatio
		canvas = document.createElement("canvas")
		parent.appendChild(canvas)

		gl = canvas.getContext('webgl', {
			antialias:false, 
			premultipliedAlpha: false,
			alpha: false, 
			preserveDrawingBuffer: true 
		})
		var _gl = gl
		window.onresize = =>{
			var w = parent.offsetWidth
			var h = parent.offsetHeight
			canvas.style.width = w
			canvas.style.height = h
			canvas.width = w * pixelRatio
			canvas.height = h * pixelRatio
			_gl.viewport(0,0,w * pixelRatio, h * pixelRatio)
		}
		window.onresize()
	}
}

vec3Rect(x,y,w,h){
	return vec3[6](
		x,y,0, x+w,y,0, x,y+h,0
		x+w,y,0, x+w,y+h,0, x,y+h,0
	)
}

class GLNode{

	clearAll:( vec3 col ){
		gl.clearColor(col[0], col[1], col[2], 1.0)
		gl.colorMask(true, true, true, true)
		gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT)
	}

	type: triangle

	class ToGLSL extends AST.ToCode{
		enum variables{
			gl_PointCoord, gl_FrontFacing, gl_FragCoord, gl_Position
			gl_PointSize, gl_ClipDistance, gl_VertexID, gl_InstanceID
			gl_MaxVertexAttribs, gl_MaxVertexUniformVectors
			gl_MaxVaryingVectors, gl_MaxVertexTextureImageUnits
			gl_MaxCombinedTextureImageUnits, gl_MaxTextureImageUnits
			gl_MaxFragmentUniformVectors, gl_MaxDrawBuffers
		}	

		enum types{
			half, float, double, short, long
			mat2, mat3, mat4
			vec2, vec3, vec4
			ivec2, ivec3, ivec4
			bvec2, bvec3, bvec4
			hvec2, hvec3, hvec4
			dvec2, dvec3, dvec4
			fvec2, fvec3, fvec4
			sampler2D
			samplerCube
		}

		enum functions{
			sizeof, radians, degrees
			sin, cos, tan
			asin, acos, atan
			pow, exp, log, exp2, log2
			sqrt, inversesqrt
			abs, sign, floor, ceil, fract
			mod, min, max, clamp
			mix, step, smoothstep
			length, distance
			dot, cross, normalize
			faceforward, reflect, refract
			matrixCompMult
			lessThan, lessThanEqual
			greaterThan, greaterThanEqual
			equal, notEqual
			any, all, not
			texture2DLod
			texture2DProjLod
			textureCubeLod
			texture2D
			texture2DProj
			textureCube
		}

		// we have to resolve a property
		resolve_overload( prop ){
			var len = overloads.length
			for(var i = len-1; i >= 0; i--){
				var found = overloads[i][prop]
				if(found !== undefined){
					return found
				}
			}
		}

		// alright first we are going to resolve Id's by inlining them from overload
		Id( n ){
			var name = n.name
			// if we are # bla lets resolve the color and inline.
			if(n.flag == 35){ // is a color
				vec4 col = this.context.color(name)
				return 'vec4(' + col.x + ','+col.y+','+col.z+',1.0)'
			}

			if(name in functions || name in variables){
				return n.name
			}

			// okay so we might have to resolve this thing
			var resolve = this.resolve_overload(n.name)
			
			if(!resolve) throw new Error("cannot resolve "+n.name)

			// allright we have the type
			if(resolve.bind) return this.expand(resolve.bind, n)
			if(typeof resolve.t != 'object') throw new Error('dont know what to do with resolve target')

			return ''
		}

		// resolve index
		Index( n ){
			// so we got a bla[] 
			if(!n.index){
				if(n.object.type != 'Id') throw new Error('dont support property attributes')

				var name = n.object.name
				var obj = this.resolve_overload(name)

				if(!obj) throw new Error('Cannot find vertex attribute[] '+name)

				var attr = attribs[name]
				if(attr && attr !== obj) throw new Error('Cannot redefine vertex attribute[] '+name)

				attribs[name] = obj

				return name // return name 
			}

			return AST.ToCode::Index(n)
		}

		// we have to resolve Id's 
		Key( n ){
			var objname = n.object.name
			if(objname in variables){
				return objname+'.'+n.key.name
			}
			// okay! we have to check if object
			return AST.ToCode::Key(n)
		}

		Call = function( n, extra, pre ){
			var fn = this.expand(n.fn, n)
			var fn_t = n.fn.type
			if(fn_t == 'List' || fn_t == 'Logic' || fn_t == 'Condition') 
				fn = '(' + fn + ')'
			var arg = ''
			if(pre) arg += this.list(pre, n)
			if(n.args && n.args.length){
				if(arg) arg += ', '
				arg += this.list(n.args, n)
			}
			if(extra){
				if(arg) arg += ', '
				arg += this.list(extra, n)
			}
			return fn + '(' + arg + ')'
		}

		Do = AST.ToJS.Do
	}

	class ToDrawJS extends AST.ToJS{

		_compile_draw( n ){
			if(!n.args.length) throw new Error('draw needs args')
		
			var uid = 'd' + this.uid++

			var ovl = ToGLSL.overloads = []
			for(var arg from n.args){
				if(arg.type == 'This') ovl.push(this.context)
				else ovl.push(this[arg.name])
			}

			ToGLSL.module = module
			ToGLSL.context = context
			var attribs = ToGLSL.attribs = Object.create(null)

			// compile vertex shader
			var vtx = ToGLSL.resolve_overload('vertex')
			if(!vtx.bind) throw new Error('Unexpected vertex type')
			var vtx_expr = ToGLSL.expand(vtx.bind)

			// compile pixel shader
			var pix = ToGLSL.resolve_overload('pixel')
			if(!pix.bind) throw new Error('Unexpected vertex type')
			var pix_expr = ToGLSL.expand(pix.bind)

			var vary_decl = ''
			var attr_decl = ''
			var uni_decl = ''
			var ret = ''

			// generate attribute declarations
			for(var name in attribs){
				var attr = attribs[name]
				attr_decl += `
				attribute ${attr.t.name} ${name};
				`
			}
			// vertex shader
			var vtx_shader = `
				precision highp float;
				${uni_decl}${attr_decl}${vary_decl}
				void main(){
					gl_Position = vec4(${vtx_expr},1.0);
				}
			`
			// pixel shader
			var pix_shader = `
				precision highp float;
				${uni_decl}${vary_decl}
				void main(){
					gl_FragColor = ${pix_expr};
				}
			`
			// we have to get a unique draw ID
			ret += `
				var shader = this.${uid}_shader
				if(!shader){
					var pix_shader = gl.createShader(${gl.FRAGMENT_SHADER})
					gl.shaderSource(pix_shader, "${pix_shader.replace(/\n\t/g,'\\n\\\n\t\t\t')}")
					gl.compileShader(pix_shader)
					if (!gl.getShaderParameter(pix_shader, ${gl.COMPILE_STATUS})) throw new Error(gl.getShaderInfoLog(pix_shader))

					var vtx_shader = gl.createShader(${gl.VERTEX_SHADER})
					gl.shaderSource(vtx_shader, "${vtx_shader.replace(/\n\t/g,'\\n\\\n\t\t\t')}")
					gl.compileShader(vtx_shader)
					if (!gl.getShaderParameter(vtx_shader, ${gl.COMPILE_STATUS})) throw new Error(gl.getShaderInfoLog(vtx_shader))

					shader = gl.createProgram()
					gl.attachShader(shader, vtx_shader)
					gl.attachShader(shader, pix_shader)
					gl.linkProgram(shader)

					this.${uid}_shader = shader
			`

			for(var name in uniforms) ret += `
					this.${uid}_ul_${name} = gl.getUniformLocation(shader, "${name}");`

			for(var name in attribs)ret += `
					this.${uid}_vb_${name} = gl.createBuffer()
					this.${uid}_al_${name} = gl.getAttribLocation(shader, "${name}");`

			ret += `
				}
				gl.useProgram(shader)
			`
			var len = 0
			for(var name in attribs){
				var attr = attribs[name]
				var abname = `${uid}_ab_${name}`
				len = attr.f4.buffer.byteLength / attr.t.size
				this.context[abname] = attr.f4.buffer
				ret += `
				gl.bindBuffer(${gl.ARRAY_BUFFER}, this.${uid}_vb_${name})
				var arr_buf = this.${abname}
				if(!arr_buf.clean){
					gl.bufferData(${gl.ARRAY_BUFFER}, arr_buf, ${gl.STATIC_DRAW})
					arr_buf.clean = true
				}
				var al = this.${uid}_al_${name}
				gl.enableVertexAttribArray(al)
				gl.vertexAttribPointer(al, ${attr.t.slots}, ${gl.FLOAT}, false, ${attr.t.size}, 0)
				`
			}
			// drawing function
			ret += `
				gl.drawArrays(gl.TRIANGLES, 0, ${len})
			`
			// correctly indent the code
			ret = ret.replace(/\n\t\t\t\t/g, '\n'+this.indent)
			return ret
		}
	}

	init(){
		// we have to compile the draw signal
		// alright lets stringify draw
		// so lets stringify it.
		var js = ToDrawJS
		var ast = draw.bind
		// make a fresh scope and signals store
		js.new_state()
		// plug the module of the ast node
		js.module = ast.module
		js.context = this
		js.gl = owner.gl // use the gl context to inline gl constants
		js.uid = 0
		if(ast.type != 'Function') throw new Error('GL Draw not a function')

		var flags = js.pull_flags(ast)
		var code = js.Function( ast, undefined, ['gl'] )
		if(flags.indexOf('js') != -1) out(code)

		// lets eval it in our current space
		log(code)

		_draw = Function('module','return ' + code)(js.module)

		// just run it immediately, once.
		_draw(owner.gl)
	}
}