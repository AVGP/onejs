import math

class GLView{
	init( parent ){
		if(!parent) return

		pixelRatio = window.devicePixelRatio
		canvas = document.createElement("canvas")
		parent.appendChild(canvas)

		gl = canvas.getContext('webgl', {
			antialias:false, 
			premultipliedAlpha: false,
			alpha: false, 
			preserveDrawingBuffer: true 
		})
		var _gl = gl
		window.onresize = =>{
			var w = parent.offsetWidth
			var h = parent.offsetHeight
			canvas.style.width = w
			canvas.style.height = h
			canvas.width = w * pixelRatio
			canvas.height = h * pixelRatio
		}
		window.onresize()
	}
}

class GLNode{

	clearAll:( vec3 col ){
		gl.clearColor(col[0], col[1], col[2], 1.0)
		gl.colorMask(true, true, true, true)
		gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT)
	}

	type: triangle

	class ToGLSL extends AST.ToCode{

		// we have to resolve a property
		resolve_overload( prop ){
			var len = overloads.length
			for(var i = len-1; i >= 0; i--){
				var found = overloads[i][prop]
				if(found !== undefined){
					return found
				}
			}
		}

		// alright first we are going to resolve Id's by inlining them from overload
		Id( n ){
			// if we are # bla lets resolve the color and inline.
			if(n.flag == 35){ // is a color
				vec4 col = this.context.color(n.name)
				return 'vec4(' + col.x + ','+col.y+','+col.z+',1.0)'
			}

			// okay so we might have to resolve this thing
			var resolve = this.resolve_overload(n.name)
			
			if(!resolve) throw new Error("cannot resolve "+n.name)

			// allright we have the type
			if(resolve.bind) return this.expand(resolve.bind, n)
			if(typeof resolve.t != 'object') throw new Error('dont know what to do with resolve target')

			return ''
		}

		// resolve index
		Index( n ){
			// so we got a bla[] 
			if(!n.index){
				if(n.object.type != 'Id') throw new Error('dont support property attributes')

				var name = n.object.name
				var obj = this.resolve_overload(name)

				if(!obj) throw new Error('Cannot find vertex attribute[] '+name)

				var attr = attribs[name]
				if(attr && attr !== obj) throw new Error('Cannot redefine vertex attribute[] '+name)

				attribs[name] = obj

				return name // return name 
			}
			return AST.ToCode::Index(n)
		}

		// we have to resolve Id's 
		Key( n ){
			// okay! we have to check if object
			return ''
		}
	}

	class ToDrawJS extends AST.ToJS{

		_compile_draw( n ){
			if(!n.args.length) throw new Error('draw needs args')
		
			var uid = 'd' + this.uid++

			var ovl = ToGLSL.overloads = []
			for(var arg from n.args){
				if(arg.type == 'This') ovl.push(this.context)
				else ovl.push(this[arg.name])
			}

			ToGLSL.module = module
			ToGLSL.context = context
			var attribs = ToGLSL.attribs = Object.create(null)

			// now lets start the vertex compile
			var vtx = ToGLSL.resolve_overload('vertex')
			if(!vtx.bind) throw new Error('Unexpected vertex type')
			var vtx_expr = ToGLSL.expand(vtx.bind)

			// now lets start the vertex compile
			var pix = ToGLSL.resolve_overload('pixel')
			if(!pix.bind) throw new Error('Unexpected vertex type')
			var pix_expr = ToGLSL.expand(pix.bind)

			var vary_decl = ''
			var attr_decl = ''
			var uni_decl = ''
			var ret = ''

			// generate attribute declarations
			for(var name in attribs){
				var attr = attribs[name]
				attr_decl += `
				attribute ${attr.t.name} ${name};
				`
			}
			// vertex shader
			var vtx_shader = `
				precision mediump float;
				${ uni_decl }${ attr_decl }${ vary_decl }
				void main(){
					gl_Position = vec4(${vtx_expr},0);
				}
			`
			// pixel shader
			var pix_shader = `
				precision mediump float;
				${ uni_decl }${ vary_decl }
				void main(){
					gl_FragColor = ${pix_expr};
				}
			`
			// we have to get a unique draw ID
			ret += `
				var shader = this.${uid}_shader
				if(!shader){
					var pix_shader = gl.createShader(${gl.FRAGMENT_SHADER})
					gl.shaderSource(pix_shader, "${pix_shader.replace(/\n\t/g,'\\n\\\n\t\t\t')}")
					gl.compileShader(pix_shader)
					if (!gl.getShaderParameter(pix_shader, ${gl.COMPILE_STATUS})) throw new Error(gl.getShaderInfoLog(pix_shader))

					var vtx_shader = gl.createShader(${gl.VERTEX_SHADER})
					gl.shaderSource(vtx_shader, "${vtx_shader.replace(/\n\t/g,'\\n\\\n\t\t\t')}")
					gl.compileShader(vtx_shader)
					if (!gl.getShaderParameter(vtx_shader, ${gl.COMPILE_STATUS})) throw new Error(gl.getShaderInfoLog(vtx_shader))

					shader = gl.createProgram()
					gl.attachShader(shader, vtx_shader)
					gl.attachShader(shader, pix_shader)
					gl.linkProgram(shader)

					this.${uid}_shader = shader
			`

			for(var name in uniforms) ret += `
					this.${uid}_ul_${name} = gl.getUniformLocation(shader, "${name}");`

			for(var name in attribs)ret += `
					this.${uid}_vb_${name} = gl.createBuffer()
					this.${uid}_al_${name} = gl.getAttribLocation(shader, "${name}");`

			ret += `
				}
				gl.useProgram(shader)
			`
			var len = 0
			for(var name in attribs){
				var attr = attribs[name]
				var abname = `${uid}_ab_${name}`
				len = attr.f4.buffer.byteLength / attr.t.size
				this.context[abname] = attr.f4.buffer
				ret += `
				gl.bindBuffer(${gl.ARRAY_BUFFER}, this.${uid}_vb_${name})
				var arr_buf = this.${abname}
				if(!arr_buf.clean){
					gl.bufferData(${gl.ARRAY_BUFFER}, arr_buf, ${gl.STATIC_DRAW})
					arr_buf.clean = true
				}
				var al = this.${uid}_al_${name}
				gl.enableVertexAttribArray(al)
				gl.vertexAttribPointer(al, ${attr.t.slots}, ${gl.FLOAT}, true, ${attr.t.size}, 0)
				`
			}
			// drawing function
			ret += `
				gl.drawArrays(gl.TRIANGLES, 0, ${len})
			`

			// correctly indent the code
			ret = ret.replace(/\n\t\t\t\t/g, '\n'+this.indent)

			return ret
		}
	}

	init(){
		// we have to compile the draw signal
		// alright lets stringify draw
		// so lets stringify it.
		var js = ToDrawJS
		var ast = draw.bind
		// make a fresh scope and signals store
		js.new_state()
		// plug the module of the ast node
		js.module = ast.module
		js.context = this
		js.gl = owner.gl // use the gl context to inline gl constants
		js.uid = 0
		if(ast.type != 'Function') throw new Error('GL Draw not a function')

		var flags = js.pull_flags(ast)
		var code = js.Function( ast, undefined, ['gl'] )
		if(flags.indexOf('js') != -1) out(code)

		// lets eval it in our current space
		log(code)

		_draw = Function('module','return ' + code)(js.module)


		_draw(owner.gl)
	}
}