/**
 *  ONEJS DOM To class structure mapping
 * 
 *  Copyright (C) 2014 ONEJS 
 *
 *  MIT license: Permission is hereby granted, free of charge, to any person obtaining a copy of software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
// Node is a DOM node shim that exposes a simplified, executable API
// where styling, attributes, events and classinheritance are all the same thing.
class Node{

	// define our signals, without init value
	signal click, dblclick, mouseup, mousedown, mousemove, mouseover,
		mouseout, isdown, keydown, keyup, keypress

	signal show, x, y, w, h, fill

	tag = 'div'

	// css collector object, where all css properties that are set are on
	_css = Object.create(null)

	// events collector object
	_events = Object.create(null)

	// attributes collector object
	_attrs = Object.create(null)

	// initialize node
	_init(){
		// check if we are a Text node or if someone set the text property on us
		dom_node = document.createElement( tag )
		dom_style = dom_node.style
		dom_node.one_node = this

		_parent = owner

		buildCssClasses()
		
		if(css_class_name) dom_node.className = css_class_name
		
		if(init) init(...)

		// add events and attributes
		for(var k in _events) dom_node[k] = _events[k]
		for(var k in _attrs) dom_node.setAttribute(k, _attrs[k])

		// append to parent
		if(_parent && _parent.dom_node){
			if(!_parent.child) _parent.child = [], child_index  = 0
			else child_index = _parent.child.push()
			_parent.dom_node.appendChild(dom_node)
		}

		// set text or innerhtml
		if(_text) dom_node.appendChild(dom_text = document.createTextNode(_text))
		else if(_html) dom_node.innerHTML = _html
	}

	// monitor mouse overs
	mouseover.monitor(){
		// this is the has own property existential assign
		if(!hasOwnProperty('_events')) _events = Object.create(_events)
		_events.onmouseover(e){
			one_node.$.mouse._mouseover( one_node, e)
		}
	}

	// monitor mouse outs
	mouseout.monitor(){
		if(!hasOwnProperty('_events')) _events = Object.create(_events)
		_events.onmouseout(e){
			one_node.$.mouse._mouseout( one_node, e )
		}
	}

	// capture mouse
	capture(move, end){
		$.mouse.capture(move, end)
	}

	// parent property is automagic
	get parent(){
		return _parent
	}

	// set the parent
	set parent(value){
		var old = _parent
		if(old === value) return
		_parent = value
		// remove from old
		if(old){
			var idx = child_index
			if(old.child[idx] != this) idx = old.child.indexOf(this)
			if(idx == -1) throw new Error('Parent does not contain child, but was still set as parent')
			old.child.splice(idx, 1)
			if(dom_node) dom_node.parentNode.removeChild(dom_node)
		}
		// add to new
		if(_parent){
			if(!_parent.child) _parent.child = [], n.index = 0
			else index = _parent.child.push()
			if(dom_node){
				var p = _parent.dom_node
				if(p) p.appendChild(dom_node)
			}
		}
	}

	remove(){
		parent = undefined
	}

	// clear all children
	clearAll(){
		if(!child) return
		for(var c from child){
			dom_node.removeChild(c.dom_node)
		}
		child.length = 0
	}

	// build CSS property sets
	var propToStyle = {}
	var propToCSS = {}
	for(var style in document.body.style){
		var prop = style.replace(/[A-Z]/g,m=>{
			return '_'+m.toLowerCase()
		})
		var css = style.replace(/[A-Z]/g,m=>{
			return '-'+m.toLowerCase()
		})
		// remove vendor markers
		var fcss = css
		prop = 'css_'+prop.replace(/^(webkit\_|moz\_|ms\_|o\_)/,=>{
			fcss = '-'+css
			return ''
		})

		propToStyle[prop] = style
		propToCSS[prop] = fcss
	}

	// make a stylesheet
	var styleSheet = (->{
		var style = document.createElement("style")
		style.appendChild(document.createTextNode("")) // webkit hack
		document.head.appendChild( style )
		return style.sheet
	})()

	var cssID = 0

	// recursive CSS class builder
	buildCssClasses(cls){

		if(!cls) cls = Object.getPrototypeOf(this)

		if(!cls.hasOwnProperty('css_class_name')){

			// make sure our parent has a __css__ property                    
			var proto =  Object.getPrototypeOf(cls)
			var proto_css
			if(proto){
				buildCssClasses(proto)
				proto_css = proto.css_class_name
			}

			if(cls.hasOwnProperty('_css' )){
				var data = ''
				var css = cls._css
				for(var k from Object.keys(css)){
					data += (propToCSS[k] || k) + ": " + css[k] + ";"
				}
				
				if( data ){
					var classid = cls.css_class_id = cssID++ // give class a unique ID
					if(styleSheet.addRule) styleSheet.addRule(tag + ".one" + classid, data, 0)
					else styleSheet.insertRule(tag + ".one" + classid + " {"+data+"}", 0)
				}
			}

			// alright we now walk up the parent chain, and build css classes
			if(cls.hasOwnProperty('css_class_id')){
			  	cls.css_class_name = (proto_css ? proto_css + ' ':'') + 'one' + cls.css_class_id
			}
			else if( proto_css ) cls.css_class_name = proto_css 
		}
	}

	// building our CSS property catch alls
	function cssPropDef(prop){
		return {
			enumerable:false,
			configurable:true,
			get:(){
				return _css[ prop ]
			},
			set:(value){
				var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
				c[ prop ] = value
				var s = dom_style
				if( s ) s[ propToStyle[prop] ] = value
			}
		}
	}
	
	for( var k in propToStyle ){
		defineProperty( k, cssPropDef(k) )
	}
	
	show.setter( value ){
		var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
		c.css_display = value>0?'block':'none'
		var s = dom_style
		if(s) s.display = value>0?'block':'none'
	}

	x.setter(value){
		var v = parseInt(value)
		var s = dom_style
		if(s){
			s.left = v
			return
		}
		var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
		c.css_left =  v
	}

	y.setter(value){
		var v = parseInt(value)
		var s = dom_style
		if(s){
			s.top = v
			return
		}
		var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
		c.css_top = v
	}

	w.setter(value){
		var v = parseInt(value)
		var s = dom_style
		if(s) return s.width = v
		var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
		c.css_width =  v
	}
	
	h.setter(value){
		var v = parseInt(value)
		var s = dom_style
		if(s) return s.height = v

		var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
		c.css_height = v
	}

	fill.setter(value){
		var s = dom_style
		//var str = '#' + ('000000' + ( ( ( ( ( value.getFloat32(0)*255 ) & 0xff ) << 8 | ( ( value.getFloat32(4)*255 ) & 0xff ) ) << 8 ) | ( ( value.getFloat32(8)*255 ) & 0xff ) ).toString( 16 ) ).slice( -6 )
		var str = '#' + ('000000' + ( ( ( ( ( value[0]*255 ) & 0xff ) << 8 | ( ( value[1]*255 ) & 0xff ) ) << 8 ) | ( ( value[2]*255 ) & 0xff ) ).toString( 16 ) ).slice( -6 )

		if(s) {
			s.backgroundColor = str
			//if( a !== undefined ) s.opacity = a
			return
		}
		var c = hasOwnProperty('_css') ? _css : ( _css = Object.create(_css) )
		if(c) c.css_background_color = str
		var a = value.getFloat32(3)
		if( a ) c.css_opacity = a
	}

	// the attribute catch sink
	function defineAttribute(attrib, remap){
		defineProperty( attrib, {
			enumerable:false,
			configurable:false,
			get:(){
				var dom = dom_node
				if( dom ) return dom.getAttribute( remap )
				var attrs = _attrs
				if( !attrs ) return
				return _attrs[ remap ]
			},
			set:(value){
				var tag = tagNames[ tag ]
				if( !globalAttribs[attrib] && (tag == 1 || !tag[attrib] ) ) throw new Error("HTML attribute "+attrib+" 4 not valid for tag type " + tag)
				var attrs = hasOwnProperty('_attrs') ? _attrs : ( _attrs = Object.create(_attrs) )
				attrs[ remap ] = value
				var dom = dom_node
				if( dom ) dom.setAttribute( remap, value )
			}
		})
	}

	enum domAttribs{
		accept, accept_charset, accesskey, action, align, alt, async, autocomplete, 
		autofocus, autoplay, buffered, challenge, charset, checked, cite, 
		cols, colspan, content, contenteditable, contextmenu, controls, coords, data, datetime, 
		default, defer, dir, dirname, disabled, download, draggable, dropzone, enctype, for, 
		form, headers, height,  // an overload on css
		width, hidden, high, href, hreflang, http_equiv,icon, id, ismap, itemprop, 
		keytype, kind, label, lang, language, list, loop, low, manifest, max, maxlength, media, 
		method, min, multiple, name, novalidate, open, optimum, pattern, ping, placeholder, 
		poster, preload, pubdate, radiogroup, readonly, rel, required, reversed, rows, rowspan, 
		sandbox, spellcheck, scope, scoped, seamless, selected, shape, size, sizes, span, 
		src, srcdoc, srclang, start, step, summary, tabindex, target, title, type, 
		usemap, value, wrap, class, style
	}

	// define the catch sink for attributes
	for(var k in domAttribs){
		var dat = domAttribs[k]
		var rep = k.replace(/\_/g,'-')
		defineAttribute('at_'+k, rep)
	}

	set text( value ){
		_text = v
		if(dom_text) dom_text.nodeValue = v
	}

	get text(){
		return dom_text && dom_text.nodeValue
	}
	
	set html( value ){
		_html = value
		if(dom_node) dom_node.innerHTML = value
	}
	
	get html(){
		return dom_node && dom_node.innerHTML
	}
}

// build all html tag classes on the Html class
class Html{

	enum globalAttribs{
		accesskey,  class,  contenteditable, contextmenu, dir,                 
		draggable, dropzone, hidden, id, lang, spellcheck,                 
		style, tabindex, title
	}

	var tagNames = {
		a:{download:1,href:1,hreflang:1,media:1,ping:1,rel:1,shape:1,target:1},abbr:1,address:1,
		area:{alt:1,coords:1,download:1,href:1,hreflang:1,media:1,ping:1,rel:1,shape:1,target:1},
		article:1,aside:1,audio:{autoplay:1,buffered:1,controls:1,loop:1,preload:1,src:1},b:1,
		base:{href:1,target:1},bdi:1,bdo:1,blockquote:{cite:1},body:1,br:1,
		button:{autofocus:1,disabled:1,form:1,name:1,type:1,value:1},
		canvas:{width:1,height:1},caption:{action:1},cite:1,code:1,
		col:{action:1,span:1},colgroup:{action:1,span:1},content:1,
		command:{checked:1,disabled:1,icon:1,radiogroup:1,type:1},
		data:1,datalist:1,dd:1,decorator:1,del:{cite:1,datetime:1},
		details:{open:1},dfn:1,div:1,dl:1,dt:1,element:1,em:1,
		embed:{width:1,height:1,src:1,type:1},fieldset:{disabled:1,form:1,name:1},
		figcaption:1,figure:1,footer:1,
		form:{accept:1,acceptCharset:1,action:1,autocomplete:1,enctype:1,method:1,name:1,novalidate:1,target:1},
		h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,head:1,header:1,hr:{action:1},html:{manifest:1},i1:1,
		iframe:{action:1,width:1,height:1,name:1,sandbox:1,seamless:1,src:1,srcdoc:1},
		img:{action:1,alt:1,width:1,height:1,ismap:1,src:1,usemap:1},
		input:{accept:1,alt:1,autocomplete:1,autofocus:1,checked:1,dirname:1,disabled:1,form:1,
		width:1,height:1,list:1,max:1,maxlength:1,min:1,multiple:1,name:1,pattern:1,placeholder:1,
		readonly:1,required:1,_size:1,src:1,step:1,type:1,usemap:1,value:1},
		ins:{cite:1,datetime:1},kbd:1,keygen:{autofocus:1,challenge:1,disabled:1,form:1,keytype:1,name:1},
		label:{for:1,form:1},legend:1,li:{value:1},
		link:{href:1,hreflang:1,media:1,rel:1,sizes:1},
		main:1,map:{name:1},mark:1,menu:{type:1},menuitem:1,
		meta:{charset:1,content:1,httpEquiv:1,name:1},
		meter:{form:1,high:1,low:1,max:1,min:1,optimum:1,value:1},nav:1,
		object:{data:1,form:1,width:1,height:1,name:1,type:1,usemap:1},
		ol:{reversed:1,start:1},optgroup:{disabled:1},
		option:{disabled:1,selected:1,value:1},output:{for:1,form:1,name:1},
		p:1,param:{name:1,value:1},pre:1,progress:{form:1,max:1,value:1},
		q:{cite:1},rp:1,rt:1,ruby:1,s:1,samp:1,
		script:{async:1,charset:1,defer:1,language:1,src:1,type:1},
		section:1,select:{autofocus:1,disabled:1,form:1,multiple:1,name:1,required:1,_size:1},
		small:1,source:{media:1,src:1,type:1},span:1,
		strong:1,style:{media:1,scoped:1,type:1},sub:1,summary:1,sup:1,
		table:{action:1,summary:1},tbody:{action:1},
		td:{action:1,colspan:1,headers:1,rowspan:1},template:1,
		textarea:{autofocus:1,cols:1,disabled:1,form:1,maxlength:1,name:1,placeholder:1,readonly:1,required:1,rows:1,wrap:1},
		tfoot:{action:1},th:{action:1,colspan:1,headers:1,rowspan:1,scope:1},
		thead:{action:1},time:{datetime:1,pubdate:1},title:1,
		tr:{action:1},track:{default:1,kind:1,label:1,src:1,srclang:1},u:1,ul:1,var:1,
		video:{autoplay:1,buffered:1,controls:1,width:1,height:1,loop:1,poster:1,preload:1,src:1},wbr:1
	}

	// build all the html tagnames as classes
	for(var k in tagNames){
		var cls = k[0].toUpperCase() + k.slice(1)
		this[cls] = Node.extend(this,(){
			tag = k
		}, cls)
	}
}

// animation frame requester
class AnimFrame{

	init(cb){
		reqframe = time => {
			running = false
			cb.call(owner, time, this)
		}
	}
		
	request(){
		if(running) return
		running = true
		window.requestAnimationFrame( reqframe )
	}
}

// define textnode, which has no tag
class TextNode extends Node{
	// override init
	_init(){

	}

	init(str){
		if( str !== undefined ) text = str
	}
}

// define the platform independent tags
class Text extends Node{
	tag = 'span'
	css_position = 'absolute'
	css_box_sizing = 'border-box'
	init(str){
		if( str !== undefined ) text = str
	}
}

class Float extends Node{
	tag = 'span'
	css_float = 'left'
	css_box_sizing = 'border-box'
	init(str){
		if( str !== undefined ) text = str
	}
}

class Break extends Node{
	tag = 'br'
	init(str){
		if( str !== undefined ) text = str
	}
}

class Rect extends Node{
	tag = 'div'
	css_position = 'absolute'
	css_box_sizing = 'border-box'
}

class Root extends Node{

	init( selector ){
		// set our dom_node to the passed in selector
		if( typeof selector == 'string' )
			dom_node = document.querySelectorAll( selector )[0]
		else 
			dom_node = selector
	}

	// simply initialize new nodes
	initNew(){
		var nodes = $.newNodes
		var first
		var error, errnode
		for( var i = 0; i < nodes.length; i++ ){
			var node = nodes[ i ]
			//try{ // catch errors so the DOM gets built as much as possible
			if( node.__parent ) node.__parent.dom.appendChild( node.dom )
			node.init()
			node.emit('init')
			node.bind_signals()
			//} catch( e ) { error = e, errnode = node }
		}
		nodes.length = 0
	}

	// global new node processor
	$.newNodes = [ ]
	//$.newNodes_timer = Timeout.new(  0, initNew )
}

class Mouse{

	// define signals
	x:
	y:
	xy:
	isdown:
	left:
	right:
	middle:

	enum cursors{
		'default'
		'none'
		'wait'
		'text'
		'pointer'

		'zoom-in'
		'zoom-out'
		'grab'
		'grabbing'

		'ns-resize'
		'ew-resize'
		'nwse-resize'
		'nesw-resize'

		'w-resize'
		'e-resize'
		'n-resize'
		's-resize'
		'nw-resize'
		'ne-resize'
		'sw-resize'
		'se-resize'

		'help'
		'crosshair'
		'move'

		'col-resize'
		'row-resize'

		'vertical-text'
		'context-menu'
		'no-drop'
		'not-allowed'
		'alias'
		'cell'
		'copy'
	}

	init(){	
		
		var mouse = this

		window.addEventListener('click', e => {
			var t = e.toElement || e.target
			mouse.click = makeAbsMouseSignal( t, e.pageX, e.pageY )
			if( !t || !t.one_node ) return
			t.one_node.click = makeMouseSignal( t, e.pageX, e.pageY )
		})

		window.addEventListener('dblclick', e => {
			var t = e.toElement || e.target
			mouse.dblclick = makeAbsMouseSignal( t, e.pageX, e.pageY )
			if( !t || !t.one_node ) return
			t.one_node.dblclk = makeMouseSignal( t, e.pageX, e.pageY )
		})

		window.addEventListener('mousedown', e => {
			var t = e.toElement || e.target

			if(e.button === 0 ) mouse.left = 1
			if(e.button === 1 ) mouse.middle = 1
			if(e.button === 2 ) mouse.right = 1
			mouse.isdown = makeAbsMouseSignal( t, e.pageX, e.pageY )
			mouse.cap_canset = e.button + 1
			if( !t || !t.one_node ) return
			// lets build a mouse event.
			t.one_node.isdown = 1
			t.one_node.mousedown = makeMouseSignal( t, e.pageX, e.pageY )
			mouse.cap_canset = 0

		})


		window.addEventListener('mouseup', e => {
			if(e.button === 0 ) mouse.left = 0
			if(e.button === 1 ) mouse.middle = 0
			if(e.button === 2 ) mouse.right = 0
			mouse.isdown = 0
			
			var t = e.toElement || e.target
			if( mouse.cap_this && mouse.cap_btn == e.button ){
				mouse._capEnd( e )
			} 
			else {
				if( !t || !t.one_node ) return
				t.one_node.isdown = 0
				t.one_node.mouseup = makeMouseSignal( t, e.pageX, e.pageY )
			}
		})

		// Fancy mouse interpolation mousemove 
		var move_last = Date.now()
		window.addEventListener('mousemove', e => {
			
			var px = e.pageX
			var py = e.pageY

			// send mouse signals
			mouse.x = px
			mouse.y = py
			mouse.xy = [ px, py ]
			
			// used for animation time-skewing in mouse interp
			var time = Date.now( )
			var delta = time - move_last
			move_last = time

			var cap_this = mouse.cap_this
			if( cap_this ){
				mouse._capMove( e )
				return
			}

			if( delta > 100 ) {
				var t = e.toElement || e.target
				if(! t || !t.one_node) return
				var node = t.one_node
				node.mousemove = makeMouseSignal( t, px, py)
				return
			} 
			// interpolate all 
			var dx = px - mouse._px
			var dy = py - mouse._py
			var x1 = px
			var y1 = py
			var dist = Math.sqrt(dx * dx + dy * dy )
			var step = parseInt(dist / 4) // pixel stepsize
			if( step == 0 ) step = 1
			dx = dx / step
			dy = dy / step
			var last = null
			for(var i = step - 1; i >= 0; i--){
				var t = document.elementFromPoint(x1, y1)
				if(last != t && t && t.one_node){
					last = t
					Base.mouseinterp = - (delta / (1000 * step)) * (step - i)
					t.one_node.mousemove = makeMouseSignal( t, x1, y1 )
				}
				x1 -= dx
				y1 -= dy
			}
			mouse._px = px
			mouse._py = py
		})
	}

	makeAbsMouseSignal( dom, x, y ){
		var pos = [x, y]
		if( dom && dom.one_node ) pos.tgt = dom.one_node
		return pos
	}

	makeMouseSignal( dom, x, y ){
		var _dom = dom
		var px = 0
		var py = 0
		do {
			px += _dom.offsetLeft || 0
			py += _dom.offsetTop  || 0
			_dom = _dom.offsetParent
		} while( _dom )
		var rel = [ ]
		var abs = [ ]
		rel.abs = abs
		rel.rel = rel
		abs[0] = x
		abs[1] = y
		rel[0] = x - px
		rel[1] = y - py
		var c
		if(c = cap_this){
			var start = cap_start
			rel.cap = [ abs[0] - start[0], abs[1] - start[1] ]
		}
		return rel
	}

	capture( obj, move, end ){
		if( cap_this && cap_end ){
			_capEnd( {pageX:cap_start[0],pageY:cap_start[1]})
		}
		if( cap_canset ){
			cap_btn = cap_canset - 1
			cap_this = obj
			cap_move = move
			cap_end = end
			cap_start = xy
			if(document.setCapture) document.setCapture()
		}
	}
	
	_capMove( e ){
		var sig = makeMouseSignal( cap_dom, e.pageX, e.pageY )
		
		if( typeof cap_move == 'function'){
			cap_move.call( cap_this, sig )
		}
		else cap_this[cap_move] = sig
	}
	
	_capEnd( e ){
		var sig = makeMouseSignal( cap_dom, e.pageX, e.pageY )
		if( typeof cap_end == 'function'){
			cap_end.call( mouse.cap_this, sig )
		} 
		else cap_this[mouse.cap_end] = sig
		if(document.releaseCapture) document.releaseCapture()
		cap_this = undefined
	}
	// called by DOM
	
	_mouseover( node, e ){
		if( cap_this ) return
		node.mouseover = makeMouseSignal( this, e.pageX, e.pageY )
	}
	
	_mouseout( node, e ){
		if( cap_this ) return
		node.mouseout = makeMouseSignal( this, e.pageX, e.pageY )
	}    
	
}

class Key extends Base{

	function init(){
		var key = this
		function keyupdown_toString(){
			return browserKeyTable[ this.code ]
		}

		function makeKeyUpDownSignal( repeat, code ){
			return {
				repeat: repeat,
				code: code,
				toString: keyupdown_toString
			}
		}
		function press_toString(){
			return String.fromCharCode( this.code )
		}

		window.addEventListener('keydown', function(e){
			var t = e.toElement || e.target
			var k = browserKeyTable[ e.keyCode ]
			if( k ) key[ k ] = 1
			var sig = makeKeyUpDownSignal( e.repeat, e.keyCode )
			key.key = sig
			if( !t || !t.one_node ) return
			t.one_node.keydown = sig
		})

		window.addEventListener('keyup', function(e){
			var t = e.toElement || e.target
			var k = browserKeyTable[ e.keyCode ]
			if( k ) key[ k ] = 0
			var sig = makeKeyUpDownSignal( e.repeat, e.keyCode )

			if( !t || !t.one_node ) return
			t.one_node.keyup = sig
		})

		window.addEventListener('keypress', function(e){
			var t = e.toElement || e.target
			var sig = {
				repeat: e.repeat,
				code: e.charCode,
				toString: press_toString
			}
			key.press = sig
			if( !t || !t.one_node ) return
			t.one_node.keypress = sig
		})
	}

	var browserKeyTable = { // slap a usable name on keys
		8:'backspace',9:'tab',13:'enter',16:'shift',17:'ctrl',18:'alt',
		19:'pause',20:'caps',27:'escape',
		32:'space',33:'pgup',34:'pgdn',
		35:'end',36:'home',37:'left',38:'up',39:'right',40:'down',
		45:'insert',46:'delete',
		48:'num0',49:'num1',50:'num2',51:'num3',52:'num4',
		53:'num5',54:'num6',55:'num7',56:'num8',57:'num9',
		65:'a',66:'b',67:'c',68:'d',69:'e',70:'f',71:'g',
		72:'h',73:'i',74:'j',75:'k',76:'l',77:'m',78:'n',
		79:'o',80:'p',81:'q',82:'r',83:'s',84:'t',85:'u',
		86:'v',87:'w',88:'x',89:'y',90:'z',
		91:'leftmeta',92:'rightmeta',
		96:'pad0',97:'pad1',98:'pad2',99:'pad3',100:'pad4',101:'pad5',
		102:'pad6',103:'pad7',104:'pad8',105:'pad9',
		106:'multiply',107:'add',109:'subtract',110:'decimal',111:'divide',
		112:'f1',113:'f2',114:'f3',115:'f4',116:'f5',117:'f6',
		118:'f7',119:'f8',120:'f9',121:'f10',122:'f11',123:'f12',
		144:'numlock',145:'scrollock',186:'semicolon',187:'equals',188:'comma',
		189:'dash',190:'period',191:'slash',192:'accent',219:'openbracket',
		220:'backslash',221:'closebracket',222:'singlequote'
	}

	for(var k in browserKeyTable){
		var key = browserKeyTable[ k ]
		this[ k ] = key
		signal( key, 0 )
	}
	signal press, key

	cmd: leftmeta || rightmeta
	meta: leftmeta || rightmeta
	
	wasd: [ a?-1:d?1:0, w?-1:s?1:0 ]
	arrows: [ left?-1:right?1:0, up?-1:down?1:0 ]
}

class Screen{

	init(){
		var screen = this
		window.addEventListener('resize', function(event){
			var w = window.innerWidth
			var h = window.innerHeight
			screen.w = w
			screen.h = h
			screen.wh = [w,h]
		});
	}

	var _w = window.innerWidth
	var _h = window.innerHeight        
	w:=_w
	h:=_h
	wh:=[_w, _h]
}

// export singleton instances
$.mouse = Mouse{}
$.key = Key{}
$.screen = Screen{}