 /*
 * Parts copyright 2014 OneJS
 * Parts copyright 2012 Google, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Google Author(s): Behdad Esfahbod, Maysum Panju
 */
import math
import gl
import network

class TextImpl{

	class Atlas extends Texture{
		lookup:(int offset, ivec2 _atlas_pos){

			vec2 pos =(vec2(_atlas_pos.xy * u_item_geom +
				ivec2(mod(float(offset), u_item_geom_x), offset / u_item_geom.x)) +
				vec2(.5, .5)) / u_atlas_size

			return texture2D(this, pos, {
				MIN_FILTER:NEAREST
				MAG_FILTER:NEAREST
				WRAP_S:CLAMP_TO_EDGE
				WRAP_T:CLAMP_TO_EDGE
			})
		}
	}

	// shader font styling options
	u_boldness = 0
	u_scaling = 0
	u_distance = 0
	u_gamma_adjust = vec3(1.4,1.6,1.4)
	u_outline = false
	u_debug = false
	u_contrast = 1.4
	u_outline_thickness = 1//:device.ratio
	u_color = #white
	u_bgcolor = #black
	u_subpixel_off = 1.0115
	u_subpixel_distance = 3.
	// the text extents
	_text_w = 0
	_text_h = 0

	// fundamental rendering modes
	mode_sdf = true // turn sdf mode on or off
	mode_whitespace = false // wether whitespace generates triangles
	mode_tabs_are_spaces = false
	// our font blob
	font = import('fonts/code_font1_ascii_baked.glf', 'arraybuffer')
	
	font_size = 10
	line_spacing = 1.2
	italic_ness = 0
	// defines the line 
	cursor_spacing = 1.3
	cursor_sink = 0.32

	dump_sdf = false
	sdf_bake = false
	//mes
	mesh = vec4[]()

	// initial pixel and vertex shaders
	vertex: mesh[].xy
	pixel: glyphy_pixel//glyphy_draw(pixel mesh[])

	// placeholder to get the coordinates
	glyphy_coords: mesh[].zw

	__text = ''

	style:(vec4 pos){
	}
	paint:(p, dpx, dpy, m){
		return vec4(-1.)
	}

	get line_height(){
		return font_size * line_spacing
	}

	set line_height(){
		throw new Error('read only property')
	}

	// define a getter and setter
	get text(v){
		return __text
	}

	set text(v){
		if(v && v._ast_) v = v.value
		if(typeof v !== 'string') v = '<invalid type>'
		__text = v
		if(text_initialized){
			allocText(__text.length)
			string(__text)
			updateText()
		}
	}

	constructor(){

		var font_name = font && font.name
		var info = _glyphy_font_cache[font_name] || 
			(_glyphy_font_cache[font_name] = parseFont(font))

		// we cant do glyphy mode with baked textures
		if(info.baked) mode_sdf = true

		if(mode_sdf){
			if(!info.sdf_texture) generateSDFCache(info)
			else sdf_texture = info.sdf_texture
			if(u_bgcolor){
				glyphy_pixel: glyphy_sdf_draw_subpixel_5tap(pixel mesh[])
			}
			else{
				glyphy_pixel: glyphy_sdf_draw(pixel mesh[])
			}
		}
		else{
			glyphy_pixel: glyphy_atlas_draw(pixel mesh[])
		}
		
		u_item_geom_x = info.item_w
		u_item_geom = ivec2(info.item_w, info.item_h)
		u_atlas_size = vec2(info.tex_w, info.tex_h)

		glyphy_atlas = info.atlas
		glyphy_info = info
		
		// updates geometry
		text_initialized = true
		text = __text
	}

	// just for the compiler you can 
	glyphy_atlas = Atlas

	// global font cache
	_glyphy_font_cache = {}

	genDefaults(info){
		// we need to add a space, newline and tab character.
		if(!(32 in info.glyphs)) info.count++
		info.glyphs[32] = { // space
			min_x: 0
			min_y: -0.3
			max_x: 0.5
			max_y: 1.
			tmin_x:0
			tmin_y:0
			tmax_x:1
			tmax_y:1
			advance:0.5
			width: 0
			height: 0
		}
		if(!(10 in info.glyphs)) info.count++
		info.glyphs[10] = { // newline
			min_x: 0
			min_y: 0
			max_x: 0.5
			max_y: 0
			tmin_x:0
			tmin_y:0
			tmax_x:1
			tmax_y:1
			advance:0.5
			width: 0
			height: 0
		}
		if(!(9 in info.glyphs)) info.count++
		info.glyphs[9] = { // tab
			min_x: 0
			min_y: -0.3
			max_x: 2
			max_y: 1.
			tmin_x:0
			tmin_y:0
			tmax_x:1
			tmax_y:1
			advance:2
			width: 2
			height: 1
		}
	}

	parseFont(blob){
		// lets parse the font
		var vuint16 = new Uint16Array(blob)
		var vuint32 = new Uint32Array(blob)
		var vfloat32 = new Float32Array(blob)
		var vuint8 = new Uint8Array(blob)

		var info = {}
		glyphy_info = info

		if(vuint32[0] == 0x02F01175){ // baked format
			info.baked = true
			// lets parse the glyph set
			info.tex_w = vuint16[2]
			info.tex_h = vuint16[3]
			var length = info.count = vuint32[2]

			if(length>10000) throw new Error('Font seems incorrect')
			var off = 3

			var glyphs = info.glyphs = {}
			for(var i = 0;i<length;i++){
				var unicode = vuint32[off++]
				var glyph = {
					min_x: vfloat32[off++]
					min_y: vfloat32[off++]
					max_x: vfloat32[off++]
					max_y: vfloat32[off++]
					advance: vfloat32[off++]
					tmin_x: vfloat32[off++]
					tmin_y: vfloat32[off++]
					tmax_x: vfloat32[off++]
					tmax_y: vfloat32[off++]
				}				
				glyphs[unicode] = glyph
				glyph.width = glyph.max_x - glyph.min_x 
				glyph.height = glyph.max_y - glyph.min_y
			}
			info.sdf_texture = Texture.array(blob.slice(off * 4), info.tex_w, info.tex_h)
		}
		else if(vuint32[0] == 0x01F01175){ // glyphy format
			// lets parse the glyph set
			info.tex_w = vuint16[2]
			info.tex_h = vuint16[3]
			info.item_w = vuint16[4]
			info.item_h = vuint16[5]

			var length = info.count = vuint32[3] / (7*4)

			if(length>10000) throw new Error('Font seems incorrect')
			var off = 4

			var glyphs = info.glyphs = Object.create(null)
			for(var i = 0;i<length;i++){
				var unicode = vuint32[off++]
				var glyph = glyphs[unicode] = {
					min_x: vfloat32[off++]
					min_y: vfloat32[off++]
					max_x: vfloat32[off++]
					max_y: vfloat32[off++]
					advance: vfloat32[off++]
					nominal_w: vuint8[off*4]
					nominal_h: vuint8[off*4+1]
					atlas_x: vuint8[off*4+2]
					atlas_y: vuint8[off*4+3]
				}
				off++
				glyph.width = glyph.max_x - glyph.min_x 
				glyph.height = glyph.max_y - glyph.min_y
			}
			info.atlas = Atlas.array(blob.slice(off * 4), info.tex_w, info.tex_h)
		}
		else throw new Error('Error in font file')
		genDefaults(info)
		return info
	}

	dontProxy('add_x','add_y','alloc_off','alloc_length','char_off','lines','alloc_mesh','text_initialized')

	allocText(len){
		_text_w = 0
		_text_h = 0

		add_x = 0
		add_y = 0
		alloc_off = 0
		char_off = 0
		alloc_length = len * 6
		lines = 0
		alloc_mesh = vec4[alloc_length]()
	}

	reallocText(extra){
		vec4[] old_mesh = alloc_mesh
		var old_length = alloc_length
		alloc_length += extra * 6
		alloc_mesh = vec4[alloc_length]()

		// lets copy it
		vec4[] nmesh = alloc_mesh

		for(var i = 0;i<old_length;i++){
			nmesh[i].x = old_mesh[i].x
			nmesh[i].y = old_mesh[i].y
			nmesh[i].z = old_mesh[i].z
			nmesh[i].w = old_mesh[i].w
		}
	}

	
	charBounds(off){
		// lets find the bounds rectangle for a char
		var idx = off*6
		vec4[] mesh = alloc_mesh
		vec4 m0 = mesh[idx]
		vec4 m1 = mesh[idx + 1]
		vec4 m2 = mesh[idx + 2]
		return {
			x:m0.x
			y:m0.y
			w:m1.x - m0.x
			h:m2.y - m0.y
		}
		// lets find the baseline
		// how do we find it? 2 options.
		// we can store the baseline in the vertexbuffer in the
		// newline character, so we scan back till we hit a newline
		// and then add font_size * line_height
		// thats pretty cheap
		// we scan for it in the lines 
	}
	
	// white space
	space(t){
		if(t===undefined) t = 1
		if(mode_whitespace){
			for(var i = 0; i<t;i++) addChar(glyphy_info.glyphs[32])
		}
		else{
			add_x += glyphy_info.glyphs[32].advance * font_size * t
		}
		return t
	}

	newline(t){
		if(t===undefined) t = 1
		if(mode_whitespace){
			for(var i = 0; i<t;i++) addChar(glyphy_info.glyphs[10])
		}
		add_x = 0
		add_y += font_size * line_spacing * t
		lines++
		return t
	}

	tab(t){
		if(t===undefined) t = 1
		if(mode_tabs_are_spaces){
			return space(3 * t)
		}
		else {
			if(mode_whitespace){
				for(var i = 0; i<t;i++) addChar(glyphy_info.glyphs[9])
			}
			else add_x += glyphy_info.glyphs[9].advance * font_size * t
		}
		return t
	}

	addChar(info){
		vec4[] buf = alloc_mesh
		var o = alloc_off
		//add_x = Math.round(add_x)
		//add_y = Math.round(add_y)
		if(mode_sdf){
			buf[o].x = add_x + font_size * info.min_x
			buf[o].y = add_y - font_size * info.min_y
			buf[o].z = info.tmin_x
			buf[o].w = info.tmin_y
			o++
			buf[o+3].x = buf[o].x = add_x + font_size * info.max_x
			buf[o+3].y = buf[o].y = add_y - font_size * info.min_y
			buf[o+3].z = buf[o].z = info.tmax_x
			buf[o+3].w = buf[o].w = info.tmin_y
			o++
			buf[o+1].x = buf[o].x = add_x + font_size * info.min_x + italic_ness * info.height * font_size
			buf[o+1].y = buf[o].y = add_y - font_size * info.max_y
			buf[o+1].z = buf[o].z = info.tmin_x
			buf[o+1].w = buf[o].w = info.tmax_y
			o+=3
			buf[o].x = add_x + font_size * info.max_x + italic_ness * info.height * font_size
			buf[o].y = add_y - font_size * info.max_y
			buf[o].z = info.tmax_x
			buf[o].w = info.tmax_y
			o++
		}
		else{
			var gx = ((info.atlas_x<<6) | info.nominal_w)<<1
			var gy = ((info.atlas_y<<6) | info.nominal_h)<<1
			buf[o].x = add_x + font_size * info.min_x
			buf[o].y = add_y - font_size * info.min_y
			buf[o].z = gx
			buf[o].w = gy
			o++
			buf[o+3].x = buf[o].x = add_x + font_size * info.max_x
			buf[o+3].y = buf[o].y = add_y - font_size * info.min_y
			buf[o+3].z = buf[o].z = gx | 1
			buf[o+3].w = buf[o].w = gy
			o++
			buf[o+1].x = buf[o].x = add_x + font_size * info.min_x
			buf[o+1].y = buf[o].y = add_y - font_size * info.max_y
			buf[o+1].z = buf[o].z = gx
			buf[o+1].w = buf[o].w = gy | 1
			o+=3
			buf[o].x = add_x + font_size * info.max_x
			buf[o].y = add_y - font_size * info.max_y
			buf[o].z = gx | 1
			buf[o].w = gy | 1
			o++
		}
		char_off++
		add_x += info.advance * font_size
		if(add_x > _text_w)_text_w = add_x
		alloc_off = o
	}

	string(text, x, y){
		if(x !== undefined) add_x = x 
		if(y !== undefined) add_y = y 
		var length = text.length

		if(alloc_off + length *6 > alloc_length) reallocText(alloc_off / 6 + length)
		var chars = 0
		// alright lets convert some text babeh!
		for(var i = 0; i < length; i++){
			var unicode = text.charCodeAt(i)
			if(unicode == 32){
				chars += space()
				continue
			}
			if(unicode == 10){ // newline
				chars += newline()
				continue
			}
			if(unicode == 9){ // tab
				chars += tab()
			}
			var info = glyphy_info.glyphs[unicode]
			if(!info){
				chars += space()
				continue
			}
			// lets add some vertices
			chars ++
			addGlyph(info)
			//console.log(o)
		}
		if(add_y > _text_h) _text_h = add_y	
		return chars
	}

	updateText(){
		mesh = alloc_mesh
		text_w = _text_w
		text_h = _text_h
	}

	// we build up an sdf texture that we draw to in once:(){}
	generateSDFCache(font){
		var len = font.count * 6
		vec4[] buf = vec4[len]()

		// we have to allocate actual texture positions
		var font_size = .2
		// if we render to a font we go -1,-1 bottom left to 1,1 top right

		var width = 1024
		var height = 1024
		var margin = 8./width

		var glyphs = font.glyphs
		var left = -1  + 0.03
		var top = -1 + font_size
		var px = left
		var py = 1
		var o = 0
		var maxh = 0
		var ct = 0

		for(var k in glyphs){
			var info = glyphs[k]

			// 0___14 
			// |   /|
			// |  / |
			// | /  |
			// |/   | 
			// 23---5
			// lets add some vertices
			var gx = ((info.atlas_x<<6) | info.nominal_w)<<1
			var gy = ((info.atlas_y<<6) | info.nominal_h)<<1
			buf[o].x = info.tmin_x = px
			buf[o].y = info.tmin_y = py
			buf[o].z = gx
			buf[o].w = gy
			o++
			buf[o+3].x = buf[o].x = info.tmax_x = px + font_size * info.width
			buf[o+3].y = buf[o].y = py
			buf[o+3].z = buf[o].z = gx | 1
			buf[o+3].w = buf[o].w = gy
			o++
			buf[o+1].x = buf[o].x = px
			buf[o+1].y = buf[o].y = info.tmax_y = py - font_size * info.height
			buf[o+1].z = buf[o].z = gx
			buf[o+1].w = buf[o].w = gy | 1
			o+=3
			buf[o].x = px + font_size * info.width
			buf[o].y = py - font_size * info.height
			buf[o].z = gx | 1
			buf[o].w = gy | 1
			o++
			px += (info.tmax_x-info.tmin_x) + margin//glyph.advance * font_size
			// scale it into texture coordinates
			var my_h = (info.tmin_y-info.tmax_y) + margin
			if(my_h > maxh) maxh = my_h

			info.tmin_x = info.tmin_x *.5 + .5
			info.tmin_y = info.tmin_y *.5 + .5
			info.tmax_x = info.tmax_x *.5 + .5
			info.tmax_y = info.tmax_y *.5 + .5

			if(px + font_size > 1) px = left, py -= maxh, maxh = 0
		}

		genDefaults(font)
		// lets do a font scaling, and then just stack em horizontally
		sdf_texture = Texture.rgba(width, height)

		sdf_mesh = buf

		font.sdf_texture = sdf_texture
		
		if(dump_sdf){
			mymesh = vec2Rect(0,0,1,1)
			vertex: mymesh[]*vec2(8.,8.) * (m_mesh * m_world * device.m_camera)
			pixel: sdf_texture.sample(pixel mymesh[])// + mix(#black,#red,pixel mymesh[].y)
		}

		glyphy_coords: sdf_mesh[].zw

		if(sdf_bake){
			// lets re-encode our glyph table
			var header = 12 + font.count * 10 * 4 
			var body = sdf_texture.w_ * sdf_texture.h_ * 4
			var data = new Uint8Array(header + body)
			var vuint32 = new Uint32Array(data.buffer)
			var vfloat32 = new Float32Array(data.buffer)
			var vuint16 = new Uint16Array(data.buffer)

			var off = 0
			vuint32[off++] = 0x02F01175
			vuint16[2] = sdf_texture.w_
			vuint16[3] = sdf_texture.h_
			off++
			vuint32[off++] = font.count
			var glyphs = font.glyphs
			var check = 0
			for(var unicode in glyphs){
				var info = glyphs[unicode]
				check++
				vuint32[off++] = unicode
				vfloat32[off++] = info.min_x
				vfloat32[off++] = info.min_y
				vfloat32[off++] = info.max_x
				vfloat32[off++] = info.max_y
				vfloat32[off++] = info.advance
				vfloat32[off++] = info.tmin_x
				vfloat32[off++] = info.tmin_y
				vfloat32[off++] = info.tmax_x
				vfloat32[off++] = info.tmax_y
			}
			data._t_ = 1

			// lets send the data over
			sdf_header = data
			sdf_header_offset = header

			once:(){
				// in this once, we generate our font texture.
				sdf_texture{
					clearAll(#black)
					this{
						vertex:sdf_mesh[].xy
						pixel: glyphy_sdf_generate(pixel sdf_mesh[])
					}
					var data = sdf_header.subarray(sdf_header_offset)
					this.gl.readPixels(0,0,sdf_texture.w, sdf_texture.h, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data)
					console.log(sdf_texture.w, sdf_texture.h)
				
					// ok lets dump the header and the data to disk
					var xhr = new XMLHttpRequest()
					xhr.open("POST", "/bake", false)
					xhr.send(sdf_header)
				}
			}
		}
		else{
			once:(){
				// in this once, we generate our font texture.
				sdf_texture{
					clearAll(#black)
					this{
						vertex:sdf_mesh[].xy
						pixel: glyphy_sdf_generate(pixel sdf_mesh[])
					}
				}
			}			
		}
	}
	
	// give it some default info for the compiler
	u_item_geom_x = 0.
	u_item_geom = ivec2(0,0)
	u_atlas_size = vec2(0,0)

	define GLYPHY_INFINITY 1e9
	define GLYPHY_EPSILON 1e-5
	define GLYPHY_MAX_NUM_ENDPOINTS 32

	struct glyphy_arc_t{
		vec2  p0
		vec2  p1
		float d
	}

	struct glyphy_arc_endpoint_t{
		/* Second arc endpoint */
		vec2  p
		/* Infinity if this endpoint does not form an arc with the previous
		 * endpoint.  Ie. a "move_to".  Test with glyphy_isinf().
		 * Arc depth otherwise.  */
		float d
	}

	struct glyphy_arc_list_t {
		/* Number of endpoints in the list.
		 * Will be zero if we're far away inside or outside, in which case side is set.
		 * Will be -1 if this arc-list encodes a single line, in which case line_* are set. */
		int num_endpoints

		/* If num_endpoints is zero, this specifies whether we are inside(-1)
		 * or outside(+1).  Otherwise we're unsure(0). */
		int side
		/* Offset to the arc-endpoints from the beginning of the glyph blob */
		int offset

		/* A single line is all we care about.  It's right here. */
		float line_angle
		float line_distance /* From nominal glyph center */
	}

	glyphy_isinf:(float v){
		return abs(v) >= GLYPHY_INFINITY * .5
	}

	glyphy_iszero:(float v){
		return abs(v) <= GLYPHY_EPSILON * 2.
	}

	glyphy_ortho:(vec2 v){
		return vec2(-v.y, v.x)
	}

	glyphy_float_to_byte:(float v){
		return int(v *(256. - GLYPHY_EPSILON))
	}

	glyphy_vec4_to_bytes:(vec4 v){
		return ivec4(v *(256. - GLYPHY_EPSILON))
	}

	glyphy_float_to_two_nimbles:(float v){
		int f = glyphy_float_to_byte(v)
		return ivec2(f / 16, int(mod(float(f), 16.)))
	}

	/* returns tan(2 * atan(d)) */
	glyphy_tan2atan:(float d){
		return 2. * d /(1. - d * d)
	}

	glyphy_arc_endpoint_decode:(vec4 v, ivec2 nominal_size){
		vec2 p =(vec2(glyphy_float_to_two_nimbles(v.a)) + v.gb) / 16.
		float d = v.r
		if(d == 0.) d = GLYPHY_INFINITY
		else d = float(glyphy_float_to_byte(d) - 128) * .5 / 127.
		return glyphy_arc_endpoint_t(p * vec2(nominal_size), d)
	}

	glyphy_arc_center:(glyphy_arc_t a){
		return mix(a.p0, a.p1, .5) +
		 glyphy_ortho(a.p1 - a.p0) /(2. * glyphy_tan2atan(a.d))
	}

	glyphy_arc_wedge_contains:(glyphy_arc_t a, vec2 p){
		float d2 = glyphy_tan2atan(a.d)
		return dot(p - a.p0,(a.p1 - a.p0) * mat2(1,  d2, -d2, 1)) >= 0. &&
		 dot(p - a.p1,(a.p1 - a.p0) * mat2(1, -d2,  d2, 1)) <= 0.
	}

	glyphy_arc_wedge_signed_dist_shallow:(glyphy_arc_t a, vec2 p){
		vec2 v = normalize(a.p1 - a.p0)

		float line_d = dot(p - a.p0, glyphy_ortho(v))// * .1abs on sin(time.sec+p.x)
		if(a.d == 0.) 
			return line_d

		float d0 = dot((p - a.p0), v)
		if(d0 < 0.) 
			return sign(line_d) * distance(p, a.p0) 

		float d1 = dot((a.p1 - p), v)
		if(d1 < 0.) 
			return sign(line_d) * distance(p, a.p1)

		float r = 2. * a.d *(d0 * d1) /( d0 + d1)
		if(r * line_d > 0.) 
			return sign(line_d) * min(abs(line_d + r), min(distance(p, a.p0), distance(p, a.p1)))
		return line_d + r
	}

	glyphy_arc_wedge_signed_dist:(glyphy_arc_t a, vec2 p){
		if(abs(a.d) <= .03) return glyphy_arc_wedge_signed_dist_shallow(a, p)
		vec2 c = glyphy_arc_center(a)
		return sign(a.d) *(distance(a.p0, c) - distance(p, c))
	}

	glyphy_arc_extended_dist:(glyphy_arc_t a, vec2 p){
		/* Note: this doesn't handle points inside the wedge. */
		vec2 m = mix(a.p0, a.p1, .5)
		float d2 = glyphy_tan2atan(a.d)
		if(dot(p - m, a.p1 - m) < 0.)
			return dot(p - a.p0, normalize((a.p1 - a.p0) * mat2(+d2, -1, +1, +d2)))
		else
			return dot(p - a.p1, normalize((a.p1 - a.p0) * mat2(-d2, -1, +1, -d2)))
	}

	glyphy_arc_list_offset:(vec2 p, ivec2 nominal_size){
		ivec2 cell = ivec2(clamp(floor(p), vec2(0.,0.), vec2(nominal_size - 1)))
		return cell.y * nominal_size.x + cell.x
	}

	glyphy_arc_list_decode:(vec4 v, ivec2 nominal_size){
		glyphy_arc_list_t l
		ivec4 iv = glyphy_vec4_to_bytes(v)
		l.side = 0 /* unsure */

		if(iv.r == 0) { /* arc-list encoded */
			l.offset = (iv.g * 256) + iv.b
			l.num_endpoints = iv.a
			if(l.num_endpoints == 255) {
				l.num_endpoints = 0
				l.side = -1
			} 
			else if(l.num_endpoints == 0){
				l.side = 1
			}
		} 
		else { /* single line encoded */
			l.num_endpoints = -1
			l.line_distance = float(((iv.r - 128) * 256 + iv.g) - 0x4000) / float(0x1FFF)
											* max(float(nominal_size.x), float(nominal_size.y))
			l.line_angle = float(-((iv.b * 256 + iv.a) - 0x8000)) / float(0x7FFF) * 3.14159265358979
		}
		return l
	}

	glyphy_antialias:(d){
		return smoothstep(-.75, +.75, d)
	}

	glyphy_arc_list:(vec2 p, ivec2 nominal_size, ivec2 _atlas_pos){
		int cell_offset = glyphy_arc_list_offset(p, nominal_size)
		vec4 arc_list_data = glyphy_atlas.lookup(cell_offset, _atlas_pos)
		return glyphy_arc_list_decode(arc_list_data, nominal_size)
	}

	glyphy_sdf:(vec2 p, ivec2 nominal_size, ivec2 _atlas_pos){

		glyphy_arc_list_t arc_list = glyphy_arc_list(p, nominal_size, _atlas_pos)

		/* Short-circuits */
		if(arc_list.num_endpoints == 0) {
			/* far-away cell */
			return GLYPHY_INFINITY * float(arc_list.side)
		} 
		if(arc_list.num_endpoints == -1) {
			/* single-line */
			float angle = arc_list.line_angle 
			vec2 n = vec2(cos(angle), sin(angle))
			return dot(p -(vec2(nominal_size) * .5), n) - arc_list.line_distance
		}

		float side = float(arc_list.side)
		float min_dist = GLYPHY_INFINITY
		glyphy_arc_t closest_arc

		glyphy_arc_endpoint_t endpoint_prev, endpoint
		endpoint_prev = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset, _atlas_pos), nominal_size)
		for(int i = 1; i < GLYPHY_MAX_NUM_ENDPOINTS; i++){
			if(i >= arc_list.num_endpoints) {
				break
			}

			endpoint = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset + i, _atlas_pos), nominal_size)
			glyphy_arc_t a = glyphy_arc_t(endpoint_prev.p, endpoint.p, endpoint.d)
			endpoint_prev = endpoint
			
			if(glyphy_isinf(a.d)) continue

			if(glyphy_arc_wedge_contains(a, p)) {
				float sdist = glyphy_arc_wedge_signed_dist(a, p)
				float udist = abs(sdist) * (1. - GLYPHY_EPSILON)
				if(udist <= min_dist) {
					min_dist = udist 
					side = sdist <= 0. ? -1. : +1.
				}
			} 
			else {
				float udist = min(distance(p, a.p0), distance(p, a.p1))
				if(udist < min_dist) {
					min_dist = udist
					side = 0. /* unsure */
					closest_arc = a
				}
				else if(side == 0. && udist == min_dist) {
					/* If this new distance is the same as the current minimum,
					* compare extended distances.  Take the sign from the arc
					* with larger extended distance. */
					float old_ext_dist = glyphy_arc_extended_dist(closest_arc, p)
					float new_ext_dist = glyphy_arc_extended_dist(a, p)

					float ext_dist = abs(new_ext_dist) <= abs(old_ext_dist) ?
						old_ext_dist : new_ext_dist

					//#ifdef GLYPHY_SDF_PSEUDO_DISTANCE
					/* For emboldening and stuff: */
					min_dist = abs(ext_dist)
					//#endif
					side = sign(ext_dist)
				}
			}
		}

		if(side == 0.) {
			// Technically speaking this should not happen, but it does.  So try to fix it.
			float ext_dist = glyphy_arc_extended_dist(closest_arc, p)
			side = sign(ext_dist)
		}

		return min_dist * side
	}

	glyphy_point_dist:(vec2 p, ivec2 nominal_size, ivec2 _atlas_pos){
		glyphy_arc_list_t arc_list = glyphy_arc_list(p, nominal_size, _atlas_pos)

		float side = float(arc_list.side)
		float min_dist = GLYPHY_INFINITY

		if(arc_list.num_endpoints == 0)
			return min_dist

		glyphy_arc_endpoint_t endpoint_prev, endpoint
		endpoint_prev = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset, _atlas_pos), nominal_size)
		for(int i = 1; i < GLYPHY_MAX_NUM_ENDPOINTS; i++) {
			if(i >= arc_list.num_endpoints) {
				break
			}
			endpoint = glyphy_arc_endpoint_decode(glyphy_atlas.lookup(arc_list.offset + i, _atlas_pos), nominal_size)
			if(glyphy_isinf(endpoint.d)) continue
			min_dist = min(min_dist, distance(p, endpoint.p))
		}
		return min_dist
	}

	glyph_vertex_transcode:(vec2 v){
	  ivec2 g = ivec2 (v)
	  ivec2 corner = ivec2 (mod (v, 2.))
	  g /= 2
	  ivec2 nominal_size = ivec2 (mod (vec2(g), 64.))
	  return vec4(corner * nominal_size, g * 4)
	}

	glyphy_sdf_encode:(float value){
		float enc = .75-.25*value
		return vec4(enc,enc,enc,1.)
	}

	glyphy_sdf_decode:(vec4 value){
		return ((.75-value.r)*4.) 
	}

	glyphy_sdf_generate:(vec4 force){
		vec4 glyph = glyph_vertex_transcode(glyphy_coords)
		ivec2 nominal_size = (ivec2(mod(glyph.zw, 256.)) + 2) / 4
		ivec2 atlas_pos = ivec2(glyph.zw) / 256

		vec2 p = glyph.xy
		return glyphy_sdf_encode(glyphy_sdf(p, nominal_size, atlas_pos))
	}
// draw subpixel antialiased using SDF texture
	glyphy_sdf_draw_subpixel_3tap:(vec4 pos){

		vec2 p = pos.zw
		/* isotropic antialiasing */
		vec2 dpdx = dFdx(p) // this should mark it pixel and redo the function with a new highmark
		vec2 dpdy = dFdy(p)
		float m = length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2
		// screenspace length
		u_scaling = 500.*m 
		float fin_alpha = 1.
		vec2 sub_delta = dpdx / u_subpixel_distance
		vec3 distance
		vec4 exit = paint(p, dpdx.x, dpdy.y, m)
		if(exit.a>=0.){
			return exit
		}
		/*
		if(customDistance()){
			//m *= 0.01
			vec2 sam = sampleDistance(pos.zw)
			distance = sam.xxx
			fin_alpha = sam.y
		}
		else{
		*/
		distance = vec3(
			glyphy_sdf_decode(sdf_texture.sample(pos.zw - sub_delta)),
			glyphy_sdf_decode(sdf_texture.sample(pos.zw ))
			glyphy_sdf_decode(sdf_texture.sample(pos.zw + sub_delta))
		)*0.003
		//}

		style(pos) // per pixel styling callback

		distance -= u_boldness / 300.
		distance = distance / m * u_contrast

		if(u_outline){
			distance = abs(distance) - u_outline_thickness
		}
		vec3 col = u_bgcolor
		if(distance.g > 1. )
			discard

		vec3 alpha = glyphy_antialias(-distance)
		if(m>u_subpixel_off){ // turn off subpixel at a certain size
			//alpha.r = alpha.b = alpha.g
			return vec4(u_color, alpha.g)
		}
		//if(u_gamma_adjust != 1.){
		alpha = pow(alpha, u_gamma_adjust)
		//}
		float max_alpha = max(max(alpha.r,alpha.g),alpha.b) * fin_alpha
		if(max_alpha >0.2) max_alpha = 1.
		return vec4(mix(u_bgcolor, u_color, alpha), max_alpha)
	}
	// draw subpixel antialiased using SDF texture
	glyphy_sdf_draw_subpixel_5tap:(vec4 pos){

		vec2 p = pos.zw
		/* isotropic antialiasing */
		vec2 dpdx = dFdx(p) // this should mark it pixel and redo the function with a new highmark
		vec2 dpdy = dFdy(p)
		float m = length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2
		// screenspace length
		u_scaling = 500.*m 
		float fin_alpha = 1.
		vec2 sub_delta = dpdx / u_subpixel_distance
		vec3 distance
		vec4 exit = paint(p, dpdx.x, dpdy.y, m)
		if(exit.a>=0.){
			return exit
		}

		float v1 = glyphy_sdf_decode(sdf_texture.sample(pos.zw - sub_delta*2.))
		float v2 = glyphy_sdf_decode(sdf_texture.sample(pos.zw - sub_delta))
		float v3 = glyphy_sdf_decode(sdf_texture.sample(pos.zw))
		float v4 = glyphy_sdf_decode(sdf_texture.sample(pos.zw + sub_delta))
		float v5 = glyphy_sdf_decode(sdf_texture.sample(pos.zw + sub_delta*2.))

		distance = vec3(
			v1+v2+v3,
			v2+v3+v4,
			v3+v4+v5
		)*0.001

		style(pos) // per pixel styling callback

		distance -= u_boldness / 300.
		distance = distance / m * u_contrast

		if(u_outline){
			distance = abs(distance) - u_outline_thickness
		}

		vec3 col = u_bgcolor
		if(distance.g > 1. )
			discard

		vec3 alpha = glyphy_antialias(-distance)
		if(m>u_subpixel_off){ // turn off subpixel at a certain size
			//alpha.r = alpha.b = alpha.g
			return vec4(u_color, alpha.g)
		}
		//if(u_gamma_adjust != 1.){
		alpha = pow(alpha, u_gamma_adjust)
		//}
		float max_alpha = max(max(alpha.r,alpha.g),alpha.b) * fin_alpha
		if(max_alpha >0.2) max_alpha = 1.
		return vec4(mix(u_bgcolor, u_color, alpha), max_alpha)
	}
	// draw using SDF texture
	glyphy_sdf_draw:(vec4 pos){

		vec2 p = pos.zw
		/* isotropic antialiasing */
		vec2 dpdx = dFdx(p) // this should mark it pixel and redo the function with a new highmark
		vec2 dpdy = dFdy(p)
		float m = length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2
		// screenspace length
		u_scaling = 500.*m 
		vec4 dist_sample = sdf_texture.sample(pos.zw)
		float gsdist = glyphy_sdf_decode(dist_sample)

		u_distance = gsdist * 0.003
		
		vec4 exit = paint(p, dpdx.x, dpdx.y, m)
		if(exit.a >= 0.){
			return exit
			return vec4(#red,1.)
		}

		style(pos) // per pixel styling callback

		u_distance -= u_boldness / 300.
		u_distance = u_distance / m * u_contrast

		vec3 out_color = u_color

		if(u_outline)
			u_distance = abs(u_distance) - u_outline_thickness

		if(u_distance > 1.)
			discard

		float alpha = glyphy_antialias(-u_distance)
		
		//if(u_gamma_adjust != 1.)
		vec3 alpha3 = pow(vec3(alpha), u_gamma_adjust)
		
		return vec4(out_color.rgb, alpha3) 
	}

	// draw using atlas
	glyphy_atlas_draw:(vec4 force){
		vec4 glyph = glyph_vertex_transcode(glyphy_coords)
		ivec2 nominal_size = (ivec2(mod(glyph.zw, 256.)) + 2) / 4
		ivec2 atlas_pos = ivec2(glyph.zw) / 256

		vec2 p = glyph.xy
		/* isotropic antialiasing */
		vec2 dpdx = dFdx(p) // this should mark it pixel and redo the function with a new highmark
		vec2 dpdy = dFdy(p)
		float m = length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2

		u_distance = glyphy_sdf(p, nominal_size, atlas_pos) 
		u_scaling = m
		
		style(glyph)

		vec3 out_color = u_color

		u_distance -= u_boldness 
		float sdist = u_distance / m * u_contrast

		//if(!u_debug) {
			//sdist -= u_boldness * 10.
			
			if(u_outline)
				sdist = abs(sdist) - (u_outline_thickness)

			if(sdist > 1.)
				discard

			float alpha = glyphy_antialias(-sdist)
			
			if(u_gamma_adjust != 1.)
				alpha = pow(alpha, 1./u_gamma_adjust)
			
			//ivec2 item_geom = u_atlas_info.xy
			//color = vec4(float(item_geom.x) / 2048.,0.,0,1.)		
			return vec4(out_color.rgb, alpha)
		/*} 
		else {
			vec4 out_color = vec4(0,0,0,0)

			// Color the inside of the glyph a light red
			out_color += vec4(.5,0,0,.5) * smoothstep(1., -1., sdist)

			float udist = abs(sdist)
			float gudist = abs(gsdist)
			// Color the outline red
			out_color += vec4(1,0,0,1) * smoothstep(2., 1., udist)
			// Color the distance field in green
			if(!glyphy_isinf(udist))
				out_color += vec4(0,.4,0,.4 -(abs(gsdist) / max(float(nominal_size.x), float(nominal_size.y))) * 4.)

			float pdist = glyphy_point_dist(p, nominal_size, atlas_pos)
			// Color points green
			out_color = mix(vec4(0,1,0,.5), out_color, smoothstep(.05, .06, pdist))

			glyphy_arc_list_t arc_list = glyphy_arc_list(p, nominal_size, atlas_pos)
			// Color the number of endpoints per cell blue
			out_color += vec4(0,0,1,.1) * float(arc_list.num_endpoints) * 32./255.

			return out_color
		}*/
	}
}

class TaggedTextImpl extends TextImpl{

	
	dontProxy('tag_x','tag_y','alloc_tags')

	tag_x = 0
	tag_y = 0

	charTag(off){
		return vec4[] alloc_tags[off * 6]
	}
	
	charTag_z(off){
		return vec4[] alloc_tags[off * 6].z
	}

	reserialize(){
		var s = ''
		vec4[] buf = alloc_tags
		for(var i = 0;i<char_off;i++){
			s += String.fromCharCode(buf[i*6].z)
		}
		return s
	}
	
	// turn a baseline into a an approximate top
	baseToTop(y){
		return y + font_size * cursor_sink - line_height 
	}

	// fetch the baseline of a character by offset
	charBaseline(off){
		// scan backwards to newline and add a line.
		// if 0 return 0
		var o = off * 6
		vec4[] tags = alloc_tags
		vec4[] mesh = alloc_mesh
		while(o >= 0){
			if(tags[o].z == 10){
				var base = mesh[o].y
				if(off*6 != o) base += line_height
				return base
			} // newline
			o--
		}
		return 0
	}

	// return the cursor rectangle based on an offset
	cursorRect(off){
		var bounds = charBounds(off)
		var base = charBaseline(off)
		var height = font_size * cursor_spacing
		base += font_size * cursor_sink
		return {
			x:floor(bounds.x)
			y:floor(base - height)
			w:floor(bounds.w)
			h:height
		}
	}

	// calculate the cursor offset from mouse position
	offsetFromPos(x, y){
		vec4[] tags = alloc_tags
		vec4[] mesh = alloc_mesh
		var height = line_height
		for(var o = alloc_off - 6; o >= 0; o -= 6){
			if(o == 0 || tags[o].z == 10){
				// the baseline
				var base = o==0 ? 0: mesh[o].y
				base += font_size * cursor_sink
				//console.log(base-height, y, base)
				if(y < base && y >= base - height){
					while(o >= 0){
						var hx = (mesh[o].x + mesh[o+1].x)/2
						if(x >= mesh[o].x && x < hx){
							return o/6
						}
						if(x > hx){
							if(tags[o].z == 10) return o / 6
							return o / 6 + 1
						}
						o -=6
					}
					return -1
				}
			}
		}
		return -1
	}

	tag_pos: vec2(floor(mod(abs(tags[].w),256.)), floor(abs(tags[].w)/256.))
	
	tagChar(off, length, x, y, z){
		var o = off
		vec4[] buf = alloc_tags
		for(var i = 0; i < length; i++){
			buf[o].x = x
			buf[o].y = y
			buf[o].z = z
			buf[o].w = 0.1
			o++
			buf[o].x = x
			buf[o].y = y
			buf[o].z = z
			buf[o].w = 1
			o++
			buf[o].x = x
			buf[o].y = y
			buf[o].z = z
			buf[o].w = 256
			o++
			buf[o].x = x
			buf[o].y = y
			buf[o].z = z
			buf[o].w = 256
			o++
			buf[o].x = x
			buf[o].y = y
			buf[o].z = z
			buf[o].w = 1
			o++
			buf[o].x = x
			buf[o].y = y
			buf[o].z = z
			buf[o].w = 257
			o++
		}
	}

	reallocText(extra){

		vec4[] old_tags = alloc_tags
		var old_length = alloc_length

		TextImpl::reallocText(extra)

		alloc_tags = vec4[alloc_length]()
		vec4[] ntags = alloc_tags
		for(var i = 0;i<old_length;i++){
			ntags[i].x = old_tags[i].x
			ntags[i].y = old_tags[i].y
			ntags[i].z = old_tags[i].z
			ntags[i].w = old_tags[i].w
		}
	}

	allocText(length){
		TextImpl::allocText(length)
		alloc_tags = vec4[alloc_length]()
	}

	updateText(){
		TextImpl::updateText()
		tags = alloc_tags
	}
	/*
	insertText(offset, length){
		var from = alloc_off
		var to = alloc_off + length * 6
		for(var i = start64;i>=offset;i-=6){
			var i1 = i+length
			mesh[i1].x = mesh[i].x
			mesh[i1].y = mesh[i].y
			mesh[i1].z = mesh[i].z
			mesh[i1].w = mesh[i].w
		}
	}*/

	newline(t = 1){
		var off = alloc_off
		if(alloc_off + t * 6 > alloc_length) reallocText(alloc_off / 6 + t)
		var i = TextImpl::newline(t)
		tagChar(off, i, tag_x, tag_y, 10)
		return i
	}

	tab(t = 1){
		var off = alloc_off
		if(alloc_off + t * 6 > alloc_length) reallocText(alloc_off / 6 + t)
		var i = TextImpl::tab(t)
		tagChar(off, i, tag_x, tag_y, 9)
		return i
	}

	space(t = 1){
		var off = alloc_off
		if(alloc_off + t * 6 > alloc_length) reallocText(alloc_off / 6 + t)
		var i = TextImpl::space(t)
		tagChar(off, i, tag_x, tag_y, 32)
		return i
	}

	string(text, x, y){
		if(x !== undefined) add_x = x 
		if(y !== undefined) add_y = y 
		var length = text.length
		var chars = 0
		if(alloc_off + length * 6 > alloc_length) reallocText(alloc_off / 6 + length)

		// alright lets convert some text babeh!
		for(var i = 0; i < length; i++){
			var unicode = text.charCodeAt(i)

			// parse inline tags
			if(inline_tags && (unicode == 36||unicode==37)){
				var t = i
				var next
				while((next = text.charCodeAt(t+1)) >= 48 && next <=57){
					t++
				}
				if(i != t){
					var out = parseInt(text.slice(i+1, i-t))
					if(unicode == 36) tag_x = out
					else tag_y = out
					i = t
					continue
				}
			}
			if(unicode == 32){
				chars += space()
				continue
			}
			if(unicode == 10){ // newline
				chars += newline()
				continue
			}
			if(unicode == 9){ // tab
				chars += tab()
			}
			var glyph = glyphy_info.glyphs[unicode]
			if(!glyph){
				chars += space()
				continue
			}
			// lets add some vertices
			var off = alloc_off
			addChar(glyph)
			chars++
			tagChar(off, 1, tag_x, tag_y, unicode)
		}
		if(add_y > _text_h) _text_h = add_y	
		return chars
	}
}

class MarkedTextImpl extends TaggedTextImpl{
	// decision time. how are we going to do selection.
	// lets just do it 'some way'.
	// its actually pretty solid to have the textchunks be chunks
	// so we can add to them rect drawing too.
	u_markcolor = #red
	
	struct marker_t{
		vec2 pos 
		vec4 rect
		vec4 other
		float data
		float corner
	}
	u_border_radius = 2.
	markers = marker_t[]()

	// what i want is a super basic drawing api. how do we do it.
	union:(d1, d2){
		return min(d1, d2)
	}

	intersect:(d1, d2){
		return max(d1,d2)
	}

	substract:(d1, d2){
		return max(-d1,d2)
	}

	circle:(p, x, y, radius){
		return distance(p,vec2(x,y)) - radius
	}

	box:(p, left, top, width, height){
		vec2 xy(top, left)
		vec2 hwh(.5*width, .5*height)
		var d = abs(p - xy-hwh) - hwh
		return min(max(d.x,d.y),0.) + length(max(d,0.))
	}

	roundbox:(p, left, top, width, height, radius){
		vec2 rad2(radius,radius)
		vec2 hwh(.5*width, .5*height)
		vec2 xy(left, top)
		return length(max(abs(p - xy - hwh) - (hwh - 2.rad2), 0.)) - 2. * radius
	}

	line:(p, left, top, right, bottom, radius){
		vec2 a(left, top)
		vec2 b(right, bottom)
		var pa = p - a, ba = b - a
		float h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.)
		return length(pa - ba*h) - radius
	}


	marker_paint:(){
		var pos = markers[].pos 
		var rel = pos - pixel markers[].rect.xy
		// do pixel antialias calc
		vec2 dpdx = dFdx(rel)
		vec2 dpdy = dFdy(rel)
		float edge = length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2

		var wh = markers[].rect.zw
		vec4 other = markers[].other

		var field = roundbox(rel, 0,0, wh.x, wh.y, u_border_radius)
		if(field < 0.)
		field = sin(field-3.time.sec+0.005*pos.y)
		// alright now what. 

		return vec4(u_markcolor, smoothstep(edge,-edge,field))
	}

	mark_pixel:marker_paint()
	mark_vertex: vec3(markers[].pos,-2.) * (m_world * device.m_camera)

	mark_pos: vec2(floor(mod(markers[].corner,2.)), floor(abs(mod(markers[].corner,4.)/2.)))

	clearMarkers(){
		vec4 tags = alloc_tags
		for(var m = 0; m < alloc_off *6; m++){
			var tag = tags[m].w
			if(tag<0) tags[m].w = -tag
		}
		alloc_markers = marker_t[]()
	}

	allocMarkers(length){
		alloc_markoff = 0
		alloc_marklen = length * 6
		alloc_markers = marker_t[alloc_marklen]()
	}

	updateText(){
		if(alloc_markers) markers = alloc_markers
		TaggedTextImpl::updateText()
	}

	reallocMarkers(count){

	}
	
	addMarker(prev, self, next){
		vec4[] mesh = alloc_mesh
		vec4[] tags = alloc_tags
		marker_t[] markers = alloc_markers
		// lets fetch the rect of our mesh
		var o = alloc_markoff
		marker_t[] buf = alloc_markers
		// 0___14
		// |   /|
		// |  / |
		// | /  |
		// |/   |
		// 23---5
		/*
		var mask = 0
		// ok the top flags. 
		if(!prev) mask += corner_tl_r + corner_tr_r
		else{
			if(prev.x2 > self.x2) mask += corner_tr_h
			else if(prev.x2 < self.x2) mask += corner_tr_r
			if(prev.x < self.x) mask += corner_tl_h
			else if(prev.x > self.x) mask += corner_tl_r
		}
		if(!next) mask += corner_bl_r + corner_br_r
		else{
			if(next.x2 > self.x2) mask += corner_br_h
			else if(next.x2 < self.x2) mask += corner_br_r
			if(next.x < self.x) mask += corner_bl_h
			else if(next.x > self.x) mask += corner_bl_r
		}
	*/
		// round edges
		//if(laststart === undefined || start < laststart) edge += 1

		// allright how are we going to encode edgeflags, and a rectangle hm?
		// well first we need to take a flag, 1,2,4,8 for the corner
		// and we need flags for the corner itself
		for(var i = 0;i<6;i++){
			buf[o+i].rect.x = self.x
			buf[o+i].rect.y = self.y
			buf[o+i].rect.z = self.w
			buf[o+i].rect.w = self.h
		}
		var px1 = prev?prev.x:-1
		var px2 = prev?prev.x2:-1
		var nx1 = next?next.x:-1
		var nx2 = next?next.x2:-1

		for(var i = 0;i<6;i++){
			var oi = o+i
			buf[oi].rect.x = self.x
			buf[oi].rect.y = self.y
			buf[oi].rect.z = self.w
			buf[oi].rect.w = self.h
			buf[oi].other.x = px1
			buf[oi].other.y = px2
			buf[oi].other.z = nx1
			buf[oi].other.w = nx2
		}

		buf[o].pos.x = self.x - font_size
		buf[o].pos.y = self.y
		buf[o].data = data // edge flags and rect
		buf[o].corner = 0 
		o++
		buf[o+3].pos.x = buf[o].pos.x = self.x2 + font_size
		buf[o+3].pos.y = buf[o].pos.y = self.y
		buf[o+3].data = buf[o].data = data
		buf[o+3].corner = buf[o].corner = 1 
		o++
		buf[o+1].pos.x = buf[o].pos.x = self.x - font_size
		buf[o+1].pos.y = buf[o].pos.y = self.y2
		buf[o+1].data = buf[o].data = data
		buf[o+1].corner = buf[o].corner = 2 
		o+=3
		buf[o].pos.x = self.x2 + font_size
		buf[o].pos.y = self.y2
		buf[o].data = data
		buf[o].corner = 3 
		o++
		alloc_markoff = o

		// lets also signal the text renderer of our selection
		for(var m = self.start*6; m < (self.end+1)*6; m++){
			var tag = tags[m].w 
			if(tag>0) tags[m].w = -tag
		}
	}

	addMarkers(start, end, laststart, lastend, data){
		if(end < start){
			var t = start
			start = end
			end = t
		}
		vec4[] mesh = alloc_mesh
		vec4[] tags = alloc_tags
		var m = []

		for(var o = start, last = o; o < end; o++){
 			if(o == end - 1 || tags[o*6].z == 10){
 				var r = cursorRect(last)
				var x = mesh[o*6+1].x
				r.start = last
				r.end = o
				r.w = x - r.x
				r.x2 = r.x + r.w
				r.y2 = r.y + r.h
 				m.push(r)
 				last = o+1
 			}
 		}
 		for(var i = 0;i<m.length;i++){
 			addMarker(m[i-1], m[i], m[i+1])
 		}
	}

	drawSelf:(sec){
		// lets draw our rects, and self
		this{
			pixel:mark_pixel
			vertex:mark_vertex
		}
		this{}
	}
}
